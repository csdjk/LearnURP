#version 450
uniform vec4 _MainLightPosition;
uniform vec2 _DisableCharacterLocalLight;
uniform vec4 _CharacterLocalMainLightPosition;
uniform vec4 _NewLocalLightDir;
uniform vec4 _CustomMainLightDir;
uniform vec3 _ES_MonsterLightDir;
uniform float _ES_CharacterDisableLocalMainLight;
layout(std140, binding = 3) uniform UnityPerDraw{
  vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
  vec4 hlslcc_mtx4x4unity_WorldToObject[4];
  vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixMV[4];
  vec4 hlslcc_mtx4x4unity_MatrixMVP[4];
  vec4 Xhlslcc_UnusedXunity_WorldTransformParams;
  vec4 Xhlslcc_UnusedXunity_RenderingLayer;
  vec4 Xhlslcc_UnusedXunity_LightData;
  vec4 Xhlslcc_UnusedXunity_LightIndices[2];
  vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;
  vec4 Xhlslcc_UnusedXunity_SpecCube0_HDR;
  vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;
  vec4 Xhlslcc_UnusedXunity_LightmapST;
  vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;
  vec4 Xhlslcc_UnusedXunity_SHAr;
  vec4 Xhlslcc_UnusedXunity_SHAg;
  vec4 Xhlslcc_UnusedXunity_SHAb;
  vec4 Xhlslcc_UnusedXunity_SHBr;
  vec4 Xhlslcc_UnusedXunity_SHBg;
  vec4 Xhlslcc_UnusedXunity_SHBb;
  vec4 Xhlslcc_UnusedXunity_SHC;
  vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];
  vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];
  vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;
};
layout(std140, binding = 1) uniform UnityPerMaterial{
  vec3 _CharaWorldSpaceOffset;
  float Xhlslcc_UnusedX_DisableWorldSpaceGradient;
  vec4 _Color;
  vec4 Xhlslcc_UnusedX_BackColor;
  vec4 _MainTex_ST;
  vec4 _EyeShadowColor;
  vec4 Xhlslcc_UnusedX_BrightDiffuseColor;
  vec4 Xhlslcc_UnusedX_ShadowDiffuseColor;
  vec4 Xhlslcc_UnusedX_SpecularColor0;
  float _IsMonster;
  float Xhlslcc_UnusedX_AlphaCutoff;
  float Xhlslcc_UnusedX_NormalScale;
  float Xhlslcc_UnusedX_ShadowThreshold;
  float _ShadowFeather;
  float Xhlslcc_UnusedX_SpecularShininess;
  float Xhlslcc_UnusedX_SpecularShininess0;
  float Xhlslcc_UnusedX_SpecularIntensity;
  float Xhlslcc_UnusedX_SpecularIntensity0;
  float Xhlslcc_UnusedX_SpecularRoughness0;
  float Xhlslcc_UnusedX_SpecularThreshold;
  float Xhlslcc_UnusedX_SpecularShadowOffset;
  float Xhlslcc_UnusedX_SpecularShadowIntensity;
  float _ExMapThreshold;
  float _ExSpecularIntensity;
  float _ExCheekIntensity;
  float _ExShyIntensity;
  float _ExShadowIntensity;
  vec4 _ExCheekColor;
  vec4 _ExShyColor;
  vec4 _ExShadowColor;
  vec4 _ExEyeColor;
  float Xhlslcc_UnusedX_HairBlendWeight;
  float Xhlslcc_UnusedX_HairBlendOffset;
  float _EyeEffectProcs;
  float Xhlslcc_UnusedX_EyeEffectPower;
  vec4 _EyeEffectColor;
  float Xhlslcc_UnusedX_EyeEffectDarken;
  float _EmissionThreshold;
  float _EmissionIntensity;
  float _NoseLinePower;
  vec4 _NoseLineColor;
  int _ShowPartID;
  vec4 Xhlslcc_UnusedX_OutlineColor;
  vec4 Xhlslcc_UnusedX_OutlineColor0;
  float Xhlslcc_UnusedX_OutlineWidth;
  float Xhlslcc_UnusedX_OneMinusCharacterOutlineWidthScale;
  float Xhlslcc_UnusedX_FixLipOutline;
  float Xhlslcc_UnusedX_OutlineColorIntensity;
  int Xhlslcc_UnusedX_UsingDitherAlpha;
  float Xhlslcc_UnusedX_DitherAlpha;
  float Xhlslcc_UnusedX_DissolveRate;
  vec4 Xhlslcc_UnusedX_DissolveUVSpeed;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor1;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor2;
  float Xhlslcc_UnusedX_DissolveDistortionIntensity;
  float Xhlslcc_UnusedX_DissolveOutlineSize1;
  float Xhlslcc_UnusedX_DissolveOutlineSize2;
  float Xhlslcc_UnusedX_DissolveOutlineOffset;
  float Xhlslcc_UnusedX_DissoveDirecMask;
  float Xhlslcc_UnusedX_DissolveMapAdd;
  float Xhlslcc_UnusedX_DissolveUV;
  vec4 Xhlslcc_UnusedX_DissolveOutlineSmoothStep;
  vec4 Xhlslcc_UnusedX_DissolveST;
  vec4 Xhlslcc_UnusedX_DistortionST;
  vec4 Xhlslcc_UnusedX_DissolveMap_ST;
  vec4 Xhlslcc_UnusedX_DissolveComponent;
  vec4 Xhlslcc_UnusedX_DissolveDiretcionXYZ;
  vec4 Xhlslcc_UnusedX_DissolveCenter;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskPos;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskRootOffset;
  float Xhlslcc_UnusedX_DissolvePosMaskWorldON;
  float Xhlslcc_UnusedX_DissolveUseDirection;
  float Xhlslcc_UnusedX_DissolvePosMaskFilpOn;
  float Xhlslcc_UnusedX_DissolvePosMaskOn;
  float Xhlslcc_UnusedX_DissolvePosMaskGlobalOn;
  float Xhlslcc_UnusedX_DissoveON;
  float Xhlslcc_UnusedX_RimEdge;
  float Xhlslcc_UnusedX_RimFeatherWidth;
  float Xhlslcc_UnusedX_RimLightMode;
  vec4 Xhlslcc_UnusedX_RimColor;
  vec4 Xhlslcc_UnusedX_RimOffset;
  vec4 Xhlslcc_UnusedX_RimColor0;
  float Xhlslcc_UnusedX_Rimintensity;
  float Xhlslcc_UnusedX_RimWidth;
  float Xhlslcc_UnusedX_RimWidth0;
  float Xhlslcc_UnusedX_CustomColor;
  vec4 Xhlslcc_UnusedX_CustomColor0;
  vec4 Xhlslcc_UnusedX_CustomColor1;
  vec4 Xhlslcc_UnusedX_CustomColor2;
  vec4 Xhlslcc_UnusedX_CustomColor3;
  vec4 Xhlslcc_UnusedX_CustomColor4;
  vec4 Xhlslcc_UnusedX_CustomColor5;
  vec4 Xhlslcc_UnusedX_CustomColor6;
  vec4 Xhlslcc_UnusedX_CustomColor7;
  vec4 Xhlslcc_UnusedX_CustomColor8;
  vec4 Xhlslcc_UnusedX_CustomColor9;
  vec4 Xhlslcc_UnusedX_CustomColor10;
  vec4 Xhlslcc_UnusedX_CustomColor11;
  vec4 Xhlslcc_UnusedX_CustomColor12;
  vec4 Xhlslcc_UnusedX_CustomColor13;
  vec4 Xhlslcc_UnusedX_CustomSkinColor;
  vec4 Xhlslcc_UnusedX_CustomSkinColor1;
  vec4 Xhlslcc_UnusedX_CustomSkinLineColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor2;
  vec4 Xhlslcc_UnusedX_CustomEyeBaseColor;
  vec4 Xhlslcc_UnusedX_CustomSkinLightColor;
  vec4 Xhlslcc_UnusedX_CustomSkinDarkColor;
  vec4 Xhlslcc_UnusedX_CustomEyeDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLightColor;
  vec4 Xhlslcc_UnusedX_CustomHairDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLineColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateDarkColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurDarkColor;
  vec4 Xhlslcc_UnusedX_CustomFurInLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurInDarkColor;
  float Xhlslcc_UnusedX_CustomEyeBallColor2Range;
  int _HideCharaParts;
  int _HideNPCParts;
  float Xhlslcc_UnusedX_RimIntensityDark;
  float Xhlslcc_UnusedX_WithFur;
  float _FresnelColorStrength;
  vec4 _FresnelColor;
  vec4 _FresnelBSI;
  float Xhlslcc_UnusedX_EnableAlphaCutoff;
  float _mBloomIntensity0;
  float Xhlslcc_UnusedX_mBloomIntensity1;
  float _mBloomIntensity;
  vec4 Xhlslcc_UnusedX_mBloomColor0;
  float Xhlslcc_UnusedX_CustomsizedFace;
  vec4 Xhlslcc_UnusedX_InstaceProbeUV;
};
layout(std140, binding = 2) uniform UnityPerMaterialCharacterOnly{
  vec4 Xhlslcc_UnusedX_AddColor;
  vec4 Xhlslcc_UnusedX_EnvColor;
  vec4 Xhlslcc_UnusedX_EmissionTintColor;
  float _BackShadowRange;
  float Xhlslcc_UnusedX_ShadowBoost;
  float Xhlslcc_UnusedX_ShadowRamp;
  float Xhlslcc_UnusedX_ShadowBoostVal;
  vec4 _ShadowColor;
  vec4 _EyeBaseShadowColor;
  float _EyeShadowAngleMin;
  float _EyeShadowMaxAngle;
  float _UseUVChannel2;
  float _UseSpecialEye;
  vec4 _SpecialEyeShapeTexture_ST;
  vec4 _EyeCenter;
  vec4 _EyeSPColor1;
  vec4 _EyeSPColor2;
  float _SpecialEyeIntensity;
  vec4 _LipLinefixColor;
  float _LipLineFixThrd;
  float _LipLineFixStart;
  float _LipLineFixMax;
  float _LipLineFixScale;
  float _LipLineFixSC;
  int Xhlslcc_UnusedX_UseOverHeated;
  vec4 Xhlslcc_UnusedX_HeatDir;
  vec4 Xhlslcc_UnusedX_HeatColor0;
  vec4 Xhlslcc_UnusedX_HeatColor1;
  vec4 Xhlslcc_UnusedX_HeatColor2;
  float Xhlslcc_UnusedX_HeatedHeight;
  float Xhlslcc_UnusedX_HeatedThreshould;
  float Xhlslcc_UnusedX_HeatInst;
  float Xhlslcc_UnusedX_ParallaxAlpha;
  float Xhlslcc_UnusedX_ParallaxScale;
  vec4 Xhlslcc_UnusedX_ParallaxMap_ST;
  float Xhlslcc_UnusedX_ShadowIntensity;
  vec4 Xhlslcc_UnusedX_RefractionTexTilingOffset;
  float Xhlslcc_UnusedX_IOR;
  float Xhlslcc_UnusedX_RGBSpread;
  float Xhlslcc_UnusedX_Angle;
  vec4 Xhlslcc_UnusedX_RefractionTintColor;
  float Xhlslcc_UnusedX_DiamondScale;
  vec3 Xhlslcc_UnusedX_OffsetRelativeToCenter;
  vec3 Xhlslcc_UnusedX_EulerAngleOffset;
  vec3 Xhlslcc_UnusedX_FinalOffset;
  vec4 Xhlslcc_UnusedX_RefractionTexTilingOffset_CatHead;
  float Xhlslcc_UnusedX_IOR_CatHead;
  float Xhlslcc_UnusedX_RGBSpread_CatHead;
  float Xhlslcc_UnusedX_Angle_CatHead;
  vec4 Xhlslcc_UnusedX_RefractionTintColor_CatHead;
  float Xhlslcc_UnusedX_DiamondScale_CatHead;
  vec3 Xhlslcc_UnusedX_CenterOffset1;
  vec3 Xhlslcc_UnusedX_OffsetRelativeToCenter1;
  vec3 Xhlslcc_UnusedX_EulerAngleOffset_CatHead;
  vec3 Xhlslcc_UnusedX_FinalOffset_CatHead;
  vec3 Xhlslcc_UnusedX_CatHead_Right;
  vec3 Xhlslcc_UnusedX_CatHead_Up;
  vec3 Xhlslcc_UnusedX_CatHead_Forward;
  vec4 Xhlslcc_UnusedX_RefractionTexTilingOffset_CatHead_Weight;
  vec4 Xhlslcc_UnusedX_RefractionTintColor_CatHead_Weight;
  float Xhlslcc_UnusedX_Angle_CatHead_Weight;
  vec4 Xhlslcc_UnusedX_FinalOffset_CatHead_Weight;
  float Xhlslcc_UnusedX_SpecularIntensity_CatHead;
  float Xhlslcc_UnusedX_CharacterToonRampModeCompensation;
  vec4 Xhlslcc_UnusedX_CenterOffset;
  vec4 Xhlslcc_UnusedX_Direction;
  float Xhlslcc_UnusedX_RefIntensity;
  float Xhlslcc_UnusedX_AlphaTestThreshold;
};
in vec4 in_POSITION0;
in vec3 in_NORMAL0;
in vec2 in_TEXCOORD0;
in vec4 in_COLOR0;
in vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec2 vs_TEXCOORD8;
vec4 u_xlat0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat16_5;
vec2 u_xlat16_6;
float u_xlat16_10;
float u_xlat16_12;
ivec2 u_xlati15;
bool u_xlatb15;
float u_xlat16_17;
float u_xlat16_19;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb23;
float u_xlat16_24;
void main(){
  (u_xlat0.xyz = (in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz));
  (u_xlat0.xyz = ((hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx) + u_xlat0.xyz));
  (u_xlat0.xyz = ((hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz) + u_xlat0.xyz));
  //vs_TEXCOORD3 = positionWS
  (vs_TEXCOORD3.xyz = (u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz));

  (u_xlat0 = (in_POSITION0.yyyy * hlslcc_mtx4x4unity_MatrixMVP[1]));
  (u_xlat0 = ((hlslcc_mtx4x4unity_MatrixMVP[0] * in_POSITION0.xxxx) + u_xlat0));
  (u_xlat0 = ((hlslcc_mtx4x4unity_MatrixMVP[2] * in_POSITION0.zzzz) + u_xlat0));
  (u_xlat0 = (u_xlat0 + hlslcc_mtx4x4unity_MatrixMVP[3]));
  (u_xlat1.xy = ((in_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
  (u_xlatb15 = (0.5 < _UseUVChannel2));
  (vs_TEXCOORD0.zw = ((bool(u_xlatb15)) ? (in_TEXCOORD1.xy) : (vec2(0.0, 0.0))));

    //normalWS
  (u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz));
  (u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz));
  (u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz));
  (u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz));
  (u_xlat22 = max(u_xlat22, 0.0));
  (u_xlat22 = inversesqrt(u_xlat22));
  (u_xlat2.xyz = (vec3(u_xlat22) * u_xlat2.xyz));
    //

    //_ES_CharacterDisableLocalMainLight=(0,0)
  (u_xlat16_3.x = (_ES_CharacterDisableLocalMainLight + 1.0));
  (u_xlat16_3.x = (u_xlat16_3.x + (-abs(_DisableCharacterLocalLight.x))));
  (u_xlatb22 = (0.5 < u_xlat16_3.x));
  //_CharacterLocalMainLightPosition (-0.0595, 0.43589, 0.89803, 0.00)
  (u_xlat4.xyz = ((bool(u_xlatb22)) ? (_MainLightPosition.xyz) : (_CharacterLocalMainLightPosition.xyz)));
  (u_xlatb22 = (0.5 < _IsMonster));
  (u_xlat16_3.xyz = ((bool(u_xlatb22)) ? (_ES_MonsterLightDir.xyz) : (u_xlat4.xyz)));
  //u_xlat16_5 = LightDir
  //_CustomMainLightDir = (1,1,1,0)
  (u_xlat16_5.xyz = ((-u_xlat16_3.xyz) + _CustomMainLightDir.xyz));
  (u_xlat16_3.xyz = ((_CustomMainLightDir.www * u_xlat16_5.xyz) + u_xlat16_3.xyz));
  (u_xlat16_3.xyz = ((bool(u_xlatb22)) ? (_ES_MonsterLightDir.xyz) : (u_xlat16_3.xyz)));
//   u_xlat16_3 = LightDir = _CharacterLocalMainLightPosition
u_xlat16_3.xyz = -vec3(-0.81,-0.47,0.35);
u_xlat16_3.xyz = -vec3(-0.0,-0.47,-0.88);
u_xlat16_3.xyz = -vec3(-0.88,-0.47,-0.0);


// vs_TEXCOORD3.xyz = (u_xlat16_3.xyz+0.1);

  (u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].y);
  (u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].y);
  (u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].y);
  (u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz));
  (u_xlat22 = max(u_xlat22, 0.0));
  (u_xlat22 = inversesqrt(u_xlat22));
  (u_xlat4.xyz = (vec3(u_xlat22) * u_xlat4.xyz));

  (u_xlat22 = dot(u_xlat4.xyz, u_xlat16_3.xyz));

  (vs_TEXCOORD3.w = (u_xlat22 + 1.0));
  (vs_TEXCOORD3.w = clamp(vs_TEXCOORD3.w, 0.0, 1.0));
  if (u_xlatb15)
  {
    (u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz));
    (u_xlat16_24 = sqrt(u_xlat16_24));

    (u_xlatb15 = (u_xlat16_24 >= 0.89999998));
    //LightDirOS
    (u_xlat4.xyz = (u_xlat16_3.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz));
    (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat16_3.xxx) + u_xlat4.xyz));
    (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat16_3.zzz) + u_xlat4.xyz));
    (u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz));
    (u_xlat22 = inversesqrt(u_xlat22));
    (u_xlat4.xy = (vec2(u_xlat22) * u_xlat4.yz));

    (u_xlat16_24 = dot(vec2(0.98480999, 0.17365), u_xlat4.xy));
    (u_xlat16_5.x = dot(vec2(-0.17365, 0.98480999), u_xlat4.xy));
    (u_xlat16_12 = min(abs(u_xlat16_24), abs(u_xlat16_5.x)));
    (u_xlat16_19 = max(abs(u_xlat16_24), abs(u_xlat16_5.x)));
    (u_xlat16_19 = (1.0 / u_xlat16_19));
    (u_xlat16_12 = (u_xlat16_19 * u_xlat16_12));
    (u_xlat16_19 = (u_xlat16_12 * u_xlat16_12));
    (u_xlat22 = ((u_xlat16_19 * 0.0208351) + -0.085133001));
    (u_xlat22 = ((u_xlat16_19 * u_xlat22) + 0.180141));
    (u_xlat22 = ((u_xlat16_19 * u_xlat22) + -0.3302995));
    (u_xlat22 = ((u_xlat16_19 * u_xlat22) + 0.99986601));

    (u_xlat23 = (u_xlat22 * u_xlat16_12));
    (u_xlatb4.x = (abs(u_xlat16_24) < abs(u_xlat16_5.x)));
    (u_xlat23 = ((u_xlat23 * -2.0) + 1.5707964));
    (u_xlat23 = ((u_xlatb4.x) ? (u_xlat23) : (0.0)));
    (u_xlat22 = ((u_xlat16_12 * u_xlat22) + u_xlat23));
    (u_xlatb23 = (u_xlat16_24 < (-u_xlat16_24)));
    (u_xlat23 = ((u_xlatb23) ? (-3.1415927) : (0.0)));
    (u_xlat22 = (u_xlat22 + u_xlat23));

    (u_xlat16_12 = min(u_xlat16_24, u_xlat16_5.x));
    (u_xlat16_24 = max(u_xlat16_24, u_xlat16_5.x));
    (u_xlatb23 = (u_xlat16_12 < (-u_xlat16_12)));
    (u_xlatb4.x = (u_xlat16_24 >= (-u_xlat16_24)));
    (u_xlatb23 = (u_xlatb23 && u_xlatb4.x));
    (u_xlat22 = ((u_xlatb23) ? ((-u_xlat22)) : (u_xlat22)));

    // (u_xlatb23 = (0.0 < (-u_xlat22)));
    (u_xlat16_24 = (u_xlat22 * -0.3183099));
    (u_xlat16_24 = max(abs(u_xlat16_24), 9.9999997e-05));
    (u_xlat16_5.z = min(u_xlat16_24, 0.99989998));
    (u_xlat16_6.xy = ((in_TEXCOORD1.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0)));
    //u_xlatb23 = false
    // (u_xlat16_5.xy = ((bool(u_xlatb23)) ? (u_xlat16_6.xy) : (in_TEXCOORD1.xy)));
    (u_xlat16_5.xy = in_TEXCOORD1.xy);

    //vs_TEXCOORD5 = Face Shader UV and threshold
    // (vs_TEXCOORD5.xyz = ((bool(u_xlatb15)) ? (u_xlat16_5.xyz) : (vec3(0.0, 1.0, 0.0))));
    (vs_TEXCOORD5.xyz = u_xlat16_5.xyz);


    (vs_TEXCOORD8.xy = ((in_TEXCOORD1.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
    (u_xlat16_24 = dot(_NewLocalLightDir.xyz, _NewLocalLightDir.xyz));
    (u_xlat16_24 = sqrt(u_xlat16_24));
    (u_xlatb15 = (u_xlat16_24 >= 0.89999998));


    (u_xlat4.xyz = (_NewLocalLightDir.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz));
    (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[0].xyz * _NewLocalLightDir.xxx) + u_xlat4.xyz));
    (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[2].xyz * _NewLocalLightDir.zzz) + u_xlat4.xyz));
    (u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz));
    (u_xlat22 = inversesqrt(u_xlat22));
    (u_xlat4.xy = (vec2(u_xlat22) * u_xlat4.yz));


    (u_xlat16_24 = dot(vec2(0.98480999, 0.17365), u_xlat4.xy));
    (u_xlat16_5.x = dot(vec2(-0.17365, 0.98480999), u_xlat4.xy));
    (u_xlat16_12 = min(abs(u_xlat16_24), abs(u_xlat16_5.x)));
    (u_xlat16_19 = max(abs(u_xlat16_24), abs(u_xlat16_5.x)));
    (u_xlat16_19 = (1.0 / u_xlat16_19));
    (u_xlat16_12 = (u_xlat16_19 * u_xlat16_12));
    (u_xlat16_19 = (u_xlat16_12 * u_xlat16_12));
    (u_xlat22 = ((u_xlat16_19 * 0.0208351) + -0.085133001));
    (u_xlat22 = ((u_xlat16_19 * u_xlat22) + 0.180141));
    (u_xlat22 = ((u_xlat16_19 * u_xlat22) + -0.3302995));
    (u_xlat22 = ((u_xlat16_19 * u_xlat22) + 0.99986601));
    (u_xlat23 = (u_xlat22 * u_xlat16_12));
    (u_xlatb4.x = (abs(u_xlat16_24) < abs(u_xlat16_5.x)));
    (u_xlat23 = ((u_xlat23 * -2.0) + 1.5707964));
    (u_xlat23 = ((u_xlatb4.x) ? (u_xlat23) : (0.0)));
    (u_xlat22 = ((u_xlat16_12 * u_xlat22) + u_xlat23));
    (u_xlatb23 = (u_xlat16_24 < (-u_xlat16_24)));
    (u_xlat23 = ((u_xlatb23) ? (-3.1415927) : (0.0)));
    (u_xlat22 = (u_xlat22 + u_xlat23));
    (u_xlat16_12 = min(u_xlat16_24, u_xlat16_5.x));
    (u_xlat16_24 = max(u_xlat16_24, u_xlat16_5.x));
    (u_xlatb23 = (u_xlat16_12 < (-u_xlat16_12)));
    (u_xlatb4.x = (u_xlat16_24 >= (-u_xlat16_24)));
    (u_xlatb23 = (u_xlatb23 && u_xlatb4.x));
    (u_xlat22 = ((u_xlatb23) ? ((-u_xlat22)) : (u_xlat22)));
    (u_xlatb23 = (0.0 < (-u_xlat22)));
    (u_xlat16_24 = (u_xlat22 * -0.3183099));
    (u_xlat16_24 = max(abs(u_xlat16_24), 9.9999997e-05));
    (u_xlat16_5.z = min(u_xlat16_24, 0.99989998));
    (u_xlat16_5.xy = ((bool(u_xlatb23)) ? (u_xlat16_6.xy) : (in_TEXCOORD1.xy)));
    (vs_TEXCOORD6.xyz = ((bool(u_xlatb15)) ? (u_xlat16_5.xyz) : (vec3(0.0, 1.0, 0.0))));
  }
//   else
//   {
//     (u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz));
//     (u_xlat16_24 = sqrt(u_xlat16_24));
//     (u_xlatb15 = (u_xlat16_24 >= 0.89999998));
//     (u_xlat4.xyz = (u_xlat16_3.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz));
//     (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat16_3.xxx) + u_xlat4.xyz));
//     (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat16_3.zzz) + u_xlat4.xyz));
//     (u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz));
//     (u_xlat22 = inversesqrt(u_xlat22));
//     (u_xlat4.xy = (vec2(u_xlat22) * u_xlat4.yz));
//     (u_xlat16_3.x = dot(vec2(0.98480999, 0.17365), u_xlat4.xy));
//     (u_xlat16_10 = dot(vec2(-0.17365, 0.98480999), u_xlat4.xy));
//     (u_xlat16_17 = min(abs(u_xlat16_3.x), abs(u_xlat16_10)));
//     (u_xlat16_24 = max(abs(u_xlat16_3.x), abs(u_xlat16_10)));
//     (u_xlat16_24 = (1.0 / u_xlat16_24));
//     (u_xlat16_17 = (u_xlat16_24 * u_xlat16_17));
//     (u_xlat16_24 = (u_xlat16_17 * u_xlat16_17));
//     (u_xlat22 = ((u_xlat16_24 * 0.0208351) + -0.085133001));
//     (u_xlat22 = ((u_xlat16_24 * u_xlat22) + 0.180141));
//     (u_xlat22 = ((u_xlat16_24 * u_xlat22) + -0.3302995));
//     (u_xlat22 = ((u_xlat16_24 * u_xlat22) + 0.99986601));
//     (u_xlat23 = (u_xlat22 * u_xlat16_17));
//     (u_xlatb4.x = (abs(u_xlat16_3.x) < abs(u_xlat16_10)));
//     (u_xlat23 = ((u_xlat23 * -2.0) + 1.5707964));
//     (u_xlat23 = ((u_xlatb4.x) ? (u_xlat23) : (0.0)));
//     (u_xlat22 = ((u_xlat16_17 * u_xlat22) + u_xlat23));
//     (u_xlatb23 = (u_xlat16_3.x < (-u_xlat16_3.x)));
//     (u_xlat23 = ((u_xlatb23) ? (-3.1415927) : (0.0)));
//     (u_xlat22 = (u_xlat22 + u_xlat23));
//     (u_xlat16_17 = min(u_xlat16_3.x, u_xlat16_10));
//     (u_xlat16_3.x = max(u_xlat16_3.x, u_xlat16_10));
//     (u_xlatb23 = (u_xlat16_17 < (-u_xlat16_17)));
//     (u_xlatb4.x = (u_xlat16_3.x >= (-u_xlat16_3.x)));
//     (u_xlatb23 = (u_xlatb23 && u_xlatb4.x));
//     (u_xlat22 = ((u_xlatb23) ? ((-u_xlat22)) : (u_xlat22)));
//     (u_xlatb23 = (0.0 < (-u_xlat22)));
//     (u_xlat16_3.x = (u_xlat22 * -0.3183099));
//     (u_xlat16_3.x = max(abs(u_xlat16_3.x), 9.9999997e-05));
//     (u_xlat16_3.z = min(u_xlat16_3.x, 0.99989998));
//     (u_xlat16_5.xy = ((in_TEXCOORD0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0)));
//     (u_xlat16_3.xy = ((bool(u_xlatb23)) ? (u_xlat16_5.xy) : (in_TEXCOORD0.xy)));
//     (vs_TEXCOORD5.xyz = ((bool(u_xlatb15)) ? (u_xlat16_3.xyz) : (vec3(0.0, 1.0, 0.0))));
//     (u_xlat16_3.x = dot(_NewLocalLightDir.xyz, _NewLocalLightDir.xyz));
//     (u_xlat16_3.x = sqrt(u_xlat16_3.x));
//     (u_xlatb15 = (u_xlat16_3.x >= 0.89999998));
//     (u_xlat4.xyz = (_NewLocalLightDir.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz));
//     (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[0].xyz * _NewLocalLightDir.xxx) + u_xlat4.xyz));
//     (u_xlat4.xyz = ((hlslcc_mtx4x4unity_WorldToObject[2].xyz * _NewLocalLightDir.zzz) + u_xlat4.xyz));
//     (u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz));
//     (u_xlat22 = inversesqrt(u_xlat22));
//     (u_xlat4.xy = (vec2(u_xlat22) * u_xlat4.yz));
//     (u_xlat16_3.x = dot(vec2(0.98480999, 0.17365), u_xlat4.xy));
//     (u_xlat16_10 = dot(vec2(-0.17365, 0.98480999), u_xlat4.xy));
//     (u_xlat16_17 = min(abs(u_xlat16_3.x), abs(u_xlat16_10)));
//     (u_xlat16_24 = max(abs(u_xlat16_3.x), abs(u_xlat16_10)));
//     (u_xlat16_24 = (1.0 / u_xlat16_24));
//     (u_xlat16_17 = (u_xlat16_24 * u_xlat16_17));
//     (u_xlat16_24 = (u_xlat16_17 * u_xlat16_17));
//     (u_xlat22 = ((u_xlat16_24 * 0.0208351) + -0.085133001));
//     (u_xlat22 = ((u_xlat16_24 * u_xlat22) + 0.180141));
//     (u_xlat22 = ((u_xlat16_24 * u_xlat22) + -0.3302995));
//     (u_xlat22 = ((u_xlat16_24 * u_xlat22) + 0.99986601));
//     (u_xlat23 = (u_xlat22 * u_xlat16_17));
//     (u_xlatb4.x = (abs(u_xlat16_3.x) < abs(u_xlat16_10)));
//     (u_xlat23 = ((u_xlat23 * -2.0) + 1.5707964));
//     (u_xlat23 = ((u_xlatb4.x) ? (u_xlat23) : (0.0)));
//     (u_xlat22 = ((u_xlat16_17 * u_xlat22) + u_xlat23));
//     (u_xlatb23 = (u_xlat16_3.x < (-u_xlat16_3.x)));
//     (u_xlat23 = ((u_xlatb23) ? (-3.1415927) : (0.0)));
//     (u_xlat22 = (u_xlat22 + u_xlat23));
//     (u_xlat16_17 = min(u_xlat16_3.x, u_xlat16_10));
//     (u_xlat16_3.x = max(u_xlat16_3.x, u_xlat16_10));
//     (u_xlatb23 = (u_xlat16_17 < (-u_xlat16_17)));
//     (u_xlatb4.x = (u_xlat16_3.x >= (-u_xlat16_3.x)));
//     (u_xlatb23 = (u_xlatb23 && u_xlatb4.x));
//     (u_xlat22 = ((u_xlatb23) ? ((-u_xlat22)) : (u_xlat22)));
//     (u_xlatb23 = (0.0 < (-u_xlat22)));
//     (u_xlat16_3.x = (u_xlat22 * -0.3183099));
//     (u_xlat16_3.x = max(abs(u_xlat16_3.x), 9.9999997e-05));
//     (u_xlat16_3.z = min(u_xlat16_3.x, 0.99989998));
//     (u_xlat16_3.xy = ((bool(u_xlatb23)) ? (u_xlat16_5.xy) : (in_TEXCOORD0.xy)));
//     (vs_TEXCOORD6.xyz = ((bool(u_xlatb15)) ? (u_xlat16_3.xyz) : (vec3(0.0, 1.0, 0.0))));
//     (vs_TEXCOORD8.xy = vec2(0.0, 0.0));
//   }
  (u_xlat16_3.xy = (in_COLOR0.yx * vec2(256.0, 256.0)));
  (u_xlati15.xy = ivec2(u_xlat16_3.xy));
  (u_xlatb4.xy = lessThan(ivec4(0, 0, 0, 0), ivec4(_HideCharaParts, _HideNPCParts, _HideCharaParts, _HideCharaParts)).xy);
  (u_xlati15.xy = ivec2(uvec2((uint(u_xlati15.x) & uint(_ShowPartID)), (uint(u_xlati15.y) & uint(_ShowPartID)))));
  (u_xlati22 = ((u_xlatb4.y) ? (u_xlati15.y) : (1)));
  (u_xlati15.x = ((u_xlatb4.x) ? (u_xlati15.x) : (u_xlati22)));
  (u_xlatb15 = (0 < u_xlati15.x));

  (gl_Position = ((bool(u_xlatb15)) ? (u_xlat0) : (vec4(-99.0, -99.0, -99.0, 1.0))));
  //vs_TEXCOORD0.xy = uv , vs_TEXCOORD0.zw = uv2
  (vs_TEXCOORD0.xy = u_xlat1.xy);
  //vs_TEXCOORD1 = color
  (vs_TEXCOORD1 = in_COLOR0);
  //vs_TEXCOORD4 = normalWS
  (vs_TEXCOORD4.xyz = u_xlat2.xyz);
  (vs_TEXCOORD4.w = 0.0);
  return ;
}
