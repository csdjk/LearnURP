#version 450
uniform vec4 _Time;
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _ZBufferParams;
uniform vec4 unity_OrthoParams;
uniform vec4 _DepthDynamicScale;
layout(std140, binding = 0) uniform UnityPerMaterial{
    float _Screen_Door_Weight;
    float _RenderType;
    float _Particle_;
    float _Rotation;
    float _VertexColor_Ban;
    float _Add_Blend_Mode;
    float _SoftParticleFactor;
    vec4 _Final_VertexColor;
    float _Highlight_Alpha;
    float _Ink_Ignore;
    vec4 _Mesh_Final_VertexColor;
    vec4 _Main_Color;
    vec4 _Main_TilingOffset;
    vec4 _Main_CombinedProps1;
    vec4 _CustomDyeColor;
    vec4 _FlipBook_CombinedProps1;
    vec4 _Distort_TilingOffset;
    vec4 _Distort_CombinedProps1;
    vec4 _Distort_CombinedProps2;
    vec4 _Distort_CombinedProps3;
    float _Dst_Blend;
    float _Blend_Mode;
    vec4 _Blend_Color;
    vec4 _Blend_TilingOffset;
    vec4 _Blend_CombinedProps1;
    vec4 _Fresnel_Color;
    vec4 _Fresnel_CombinedProps1;
    vec4 _Alpha_Fresnel_CombinedProps1;
    vec4 _Alpha_TilingOffset;
    vec4 _Alpha_CombinedProps1;
    float _Alpha_Rotation;
    vec4 _Dissolve_TilingOffset;
    vec4 _Dissolve_EdgeColor;
    vec4 _Dissolve_CombinedProps1;
    vec4 _Dissolve_CombinedProps2;
    float _Effect_Dissolve_Key;
    vec4 _Effect_Dissolve_EdgeColor;
    vec4 _Effect_Dissolve_TilingOffset;
    vec4 _Effect_Dissolve_CombinedProps1;
    vec4 _Effect_Dissolve_CombinedProps2;
    vec4 _Noise_TilingOffset;
    vec4 _Mask_Noise_Speed;
    vec4 _VertexOffset_TilingOffset;
    vec4 _VertexOffset_CombinedProps1;
    vec4 _VertexOffset_CombinedProps2;
    vec4 _WangQiNPCHighLight;
    float _StainingLocalOff;
    float _StippleOn;
    float _StippleAlpha;
};
layout(location = 0) uniform sampler2D _CameraDepthTexture;
layout(location = 1) uniform sampler2D _Main_Tex;
layout(location = 2) uniform sampler2D _Distort_Tex;
layout(location = 3) uniform sampler2D _Blend_Tex;
layout(location = 4) uniform sampler2D _Alpha_Tex;
layout(location = 5) uniform sampler2D _Dissolve_Tex;
layout(location = 0) in vec4 vs_TEXCOORD8;
layout(location = 1) in vec4 vs_TEXCOORD1;
layout(location = 2) in vec4 vs_TEXCOORD2;
layout(location = 3) in vec4 vs_TEXCOORD3;
layout(location = 4) in vec3 vs_TEXCOORD4;
layout(location = 5) in vec3 vs_TEXCOORD5;
layout(location = 6) in vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat16_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat16_1;
vec4 u_xlat16_2;
vec4 u_xlat16_3;
vec4 u_xlat16_4;
vec4 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec3 u_xlat16_8;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
vec2 u_xlat16_14;
float u_xlat16_15;
vec2 u_xlat16_16;
void main(){
    vec3 debugColor = vec3(0.0,0.0,0.0);

    vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, (1.0 / gl_FragCoord.w));
    (u_xlat0.x = (_Dissolve_CombinedProps1.x + -1.5));
    (u_xlati7 = int((((0.0 < u_xlat0.x)) ? (4294967295u) : (0u))));
    (u_xlati0 = int((((u_xlat0.x < 0.0)) ? (4294967295u) : (0u))));
    (u_xlati0 = ((-u_xlati7) + u_xlati0));
    (u_xlat16_1.x = float(u_xlati0));
    (u_xlat0.xy = (vs_TEXCOORD1.xy + vec2(-0.5, -0.5)));
    (u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy));
    (u_xlat14.x = inversesqrt(u_xlat14.x));
    (u_xlat0.xy = (u_xlat14.xx * u_xlat0.xy));
    (u_xlat0.xy = ((u_xlat0.xy * _Distort_CombinedProps2.ww) + _Distort_CombinedProps2.yz));
    (u_xlat16_8.xy = ((vs_TEXCOORD1.xy * _Distort_TilingOffset.xy) + _Distort_TilingOffset.zw));
    (u_xlat14.xy = ((_Time.yy * _Distort_CombinedProps1.xy) + u_xlat16_8.xy));
    (u_xlat16_14.xy = texture(_Distort_Tex, u_xlat14.xy).xw);
    (u_xlat14.x = (u_xlat16_14.y * u_xlat16_14.x));
    (u_xlat14.x = (u_xlat14.x * vs_TEXCOORD3.w));
    (u_xlat0.xy = (u_xlat14.xx * u_xlat0.xy));
    (u_xlat16_8.xy = ((u_xlat0.xy * _Distort_CombinedProps3.zz) + vs_TEXCOORD1.xy));
    (u_xlat16_8.xy = ((u_xlat16_8.xy * _Dissolve_TilingOffset.xy) + _Dissolve_TilingOffset.zw));
    (u_xlat16_14.xy = texture(_Dissolve_Tex, u_xlat16_8.xy).xw);
    (u_xlat14.x = (u_xlat16_14.y * u_xlat16_14.x));
    (u_xlat14.x = (u_xlat14.x * _Dissolve_CombinedProps1.w));
    (u_xlat16_1.x = (u_xlat14.x * u_xlat16_1.x));
    (u_xlat16_8.xy = ((u_xlat0.xy * _Distort_CombinedProps3.yy) + vs_TEXCOORD2.xy));
    (u_xlat16_2.xy = ((u_xlat0.xy * _Distort_CombinedProps3.xx) + vs_TEXCOORD1.xy));
    (u_xlat16_16.xy = (vs_TEXCOORD2.zw + _Alpha_TilingOffset.zw));
    (u_xlat0.xy = ((_Time.yy * _Alpha_CombinedProps1.xy) + u_xlat16_16.xy));
    (u_xlat0.xy = ((u_xlat16_8.xy * _Alpha_TilingOffset.xy) + u_xlat0.xy));
    (u_xlat16_0.x = texture(_Alpha_Tex, u_xlat0.xy).w);
    (u_xlat0.x = (u_xlat16_0.x * _Alpha_CombinedProps1.w));
    (u_xlat16_8.xy = (vs_TEXCOORD3.xy + _Blend_TilingOffset.zw));
    (u_xlat7.xy = ((_Time.yy * _Blend_CombinedProps1.xy) + u_xlat16_8.xy));
    (u_xlat7.xy = ((u_xlat16_2.xy * _Blend_TilingOffset.xy) + u_xlat7.xy));
    (u_xlat16_3 = texture(_Blend_Tex, u_xlat7.xy));
    (u_xlat16_3 = (u_xlat16_3 * _Blend_Color));
    (u_xlat16_8.xyz = (u_xlat16_3.www * u_xlat16_3.xyz));
    (u_xlat16_16.xy = (vs_TEXCOORD1.zw + _Main_TilingOffset.zw));
    (u_xlat7.xy = ((_Time.yy * _Main_CombinedProps1.xy) + u_xlat16_16.xy));
    (u_xlat7.xy = ((u_xlat16_2.xy * _Main_TilingOffset.xy) + u_xlat7.xy));
    (u_xlat16_2 = texture(_Main_Tex, u_xlat7.xy));
    (u_xlat16_4 = (u_xlat16_2 * _Main_Color));
    (u_xlat16_5.xyz = ((u_xlat16_4.xyz * u_xlat16_4.www) + u_xlat16_8.xyz));
    (u_xlat16_5.w = max(u_xlat16_3.w, u_xlat16_4.w));
    (u_xlat16_5 = (((-u_xlat16_3) * u_xlat16_4) + u_xlat16_5));
    (u_xlat16_3 = (u_xlat16_3 * u_xlat16_4));
    (u_xlat16_3 = ((vec4(vec4(_Blend_Mode, _Blend_Mode, _Blend_Mode, _Blend_Mode)) * u_xlat16_5) + u_xlat16_3));
    (u_xlat16_2 = (((-u_xlat16_2) * _Main_Color) + u_xlat16_3));
    (u_xlat16_2 = ((_Blend_CombinedProps1.wwww * u_xlat16_2) + u_xlat16_4));
    (u_xlat0.x = (u_xlat0.x * u_xlat16_2.w));
    (u_xlatb7 = (1.5 >= _Dissolve_CombinedProps1.x));
    (u_xlat7.x = ((u_xlatb7) ? (1.0) : (0.0)));
    (u_xlat7.x = ((u_xlat0.x * u_xlat7.x) + u_xlat16_1.x));
    (u_xlat16_1.xy = (u_xlat7.xx + (-_Dissolve_CombinedProps2.wy)));
    (u_xlat16_15 = (u_xlat7.x + (-u_xlat16_1.y)));
    (u_xlatb7 = (vs_TEXCOORD3.z >= u_xlat7.x));
    (u_xlat16_4.xy = ((bool(u_xlatb7)) ? (vec2(0.0, -0.0)) : (vec2(1.0, -1.0))));
    (u_xlat16_15 = (1.0 / u_xlat16_15));
    (u_xlat16_8.x = ((-u_xlat16_1.y) + vs_TEXCOORD3.z));
    (u_xlatb7 = (vs_TEXCOORD3.z >= u_xlat16_1.x));
    (u_xlat16_1.xw = ((bool(u_xlatb7)) ? (vec2(1.0, -1.0)) : (vec2(0.0, -0.0))));
    (u_xlat16_8.x = (u_xlat16_15 * u_xlat16_8.x));
    (u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0));
    (u_xlat16_15 = ((u_xlat16_8.x * -2.0) + 3.0));
    (u_xlat16_8.x = (u_xlat16_8.x * u_xlat16_8.x));
    (u_xlat7.x = (((-u_xlat16_15) * u_xlat16_8.x) + 1.001));
    (u_xlat7.x = log2(u_xlat7.x));
    (u_xlat7.x = (u_xlat7.x * _Dissolve_CombinedProps2.z));
    (u_xlat7.x = exp2(u_xlat7.x));
    (u_xlat16_8.x = (u_xlat16_4.y + u_xlat7.x));
    (u_xlat16_15 = ((-u_xlat7.x) + 1.0));
    (u_xlat16_15 = (u_xlat16_1.w + u_xlat16_15));
    (u_xlat16_1.x = ((_Dissolve_CombinedProps2.x * u_xlat16_15) + u_xlat16_1.x));
    (u_xlat16_1.xzw = (u_xlat16_1.xxx * _Dissolve_EdgeColor.xyz));
    (u_xlat16_1.xzw = ((u_xlat16_1.xzw * _Dissolve_EdgeColor.www) + u_xlat16_2.xyz));

    debugColor.xyz = u_xlat16_1.xzw;

    (u_xlat16_8.x = ((_Dissolve_CombinedProps2.x * u_xlat16_8.x) + u_xlat16_4.x));
    (u_xlat7.x = ((u_xlat0.x * u_xlat16_8.x) + -9.9999997e-05));
    (u_xlat16_8.x = (u_xlat0.x * u_xlat16_8.x));
    (u_xlatb0 = (u_xlat7.x < 0.0));
    if (u_xlatb0)
    {
        discard;
    }
    (u_xlat16_4.x = dot(u_xlat16_1.xzw, vec3(0.2126729, 0.7151522, 0.072175004)));
    (u_xlat16_4.xyz = ((u_xlat16_4.xxx * _CustomDyeColor.xyz) + (-u_xlat16_1.xzw)));
    (u_xlat16_0.xyz = ((_CustomDyeColor.www * u_xlat16_4.xyz) + u_xlat16_1.xzw));
//    debugColor.xyz = u_xlat0.xxx;

    (u_xlat16_1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz));
    (u_xlat16_1.x = inversesqrt(u_xlat16_1.x));
    (u_xlat16_2.xyz = (u_xlat16_1.xxx * vs_TEXCOORD5.xyz));
    (u_xlat16_1.x = ((-_Alpha_Fresnel_CombinedProps1.y) + 1.0));
    (u_xlat16_2.w = (u_xlat16_1.x * u_xlat16_2.y));
    (u_xlat16_15 = dot(u_xlat16_2.xzw, u_xlat16_2.xzw));
    (u_xlat16_15 = max(u_xlat16_15, 6.1035156e-05));
    (u_xlat16_15 = inversesqrt(u_xlat16_15));
    (u_xlat16_4.xyz = (vec3(u_xlat16_15) * u_xlat16_2.xwz));
    (u_xlat6.xyz = ((-vs_TEXCOORD4.xyz) + vec3(_WorldSpaceCameraPos.x, _WorldSpaceCameraPos.y, _WorldSpaceCameraPos.z)));
    (u_xlat16_2.xyz = (u_xlat6.xyz * vec3(0.0099999998, 0.0099999998, 0.0099999998)));
    (u_xlat16_2.w = (u_xlat16_1.x * u_xlat16_2.y));
    (u_xlat16_1.x = dot(u_xlat16_2.xzw, u_xlat16_2.xzw));
    (u_xlat16_1.x = max(u_xlat16_1.x, 6.1035156e-05));
    (u_xlat16_1.x = inversesqrt(u_xlat16_1.x));
    (u_xlat16_1.xzw = (u_xlat16_1.xxx * u_xlat16_2.xwz));
    (u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xzw));
    (u_xlat16_1.x = min(abs(u_xlat16_1.x), 1.0));
    (u_xlat6.x = ((-u_xlat16_1.x) + 1.0));
    (u_xlatb13 = (0.5 < _Alpha_Fresnel_CombinedProps1.x));
    (u_xlat6.x = ((u_xlatb13) ? (u_xlat16_1.x) : (u_xlat6.x)));
    (u_xlat13 = ((-_Alpha_Fresnel_CombinedProps1.z) + 1.0));
    (u_xlat6.x = ((u_xlat6.x * u_xlat13) + _Alpha_Fresnel_CombinedProps1.z));
    (u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0));
    (u_xlat6.x = log2(u_xlat6.x));
    (u_xlat16_1.x = max(_Alpha_Fresnel_CombinedProps1.w, 9.9999997e-05));
    (u_xlat6.x = (u_xlat6.x * u_xlat16_1.x));
    (u_xlat6.x = exp2(u_xlat6.x));
    (u_xlat16_0.w = (u_xlat16_8.x * u_xlat6.x));
    (u_xlat16_0 = (u_xlat16_0 * vs_TEXCOORD8));
    (u_xlat16_1.xy = (vs_TEXCOORD6.xy / vs_TEXCOORD6.ww));
    (u_xlat6.xy = (u_xlat16_1.xy * _DepthDynamicScale.xy));
    (u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0)));
    (u_xlat6.xy = min(u_xlat6.xy, _DepthDynamicScale.zw));
    (u_xlat6.x = textureLod(_CameraDepthTexture, u_xlat6.xy, 0.0).x);
    (u_xlat13 = ((-u_xlat6.x) + hlslcc_FragCoord.z));
    (u_xlat6.x = ((_ZBufferParams.z * u_xlat6.x) + _ZBufferParams.w));
    (u_xlat6.x = (1.0 / u_xlat6.x));
    (u_xlat16_1.x = (u_xlat6.x + (-vs_TEXCOORD6.w)));
    (u_xlat6.x = ((-_ProjectionParams.y) + _ProjectionParams.z));
    (u_xlat6.x = (u_xlat6.x * u_xlat13));
    (u_xlatb13 = (vec4(0.0, 0.0, 0.0, 0.0) != vec4(unity_OrthoParams.w)));
    (u_xlat16_1.x = ((u_xlatb13) ? (u_xlat6.x) : (u_xlat16_1.x)));
    (u_xlat16_1.x = (u_xlat16_1.x * _SoftParticleFactor));
    (u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0));
    (u_xlat16_1.x = (u_xlat16_0.w * u_xlat16_1.x));
    (u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0));
    (SV_Target0.xyz = (u_xlat16_0.xyz * u_xlat16_1.xxx));
    SV_Target0.xyz = debugColor;

    (SV_Target0.w = (u_xlat16_1.x * _Add_Blend_Mode));
    return ;
}
