#version 450
layout(std140, binding = 0) uniform UnityPerMaterial{
  vec3 Xhlslcc_UnusedX_CharaWorldSpaceOffset;
  float Xhlslcc_UnusedX_DisableWorldSpaceGradient;
  vec4 Xhlslcc_UnusedX_Color;
  vec4 Xhlslcc_UnusedX_BackColor;
  vec4 _MainTex_ST;
  vec4 Xhlslcc_UnusedX_EyeShadowColor;
  vec4 Xhlslcc_UnusedX_BrightDiffuseColor;
  vec4 Xhlslcc_UnusedX_ShadowDiffuseColor;
  vec4 Xhlslcc_UnusedX_SpecularColor0;
  float _IsMonster;
  float Xhlslcc_UnusedX_AlphaCutoff;
  float Xhlslcc_UnusedX_NormalScale;
  float Xhlslcc_UnusedX_ShadowThreshold;
  float Xhlslcc_UnusedX_ShadowFeather;
  float Xhlslcc_UnusedX_SpecularShininess;
  float Xhlslcc_UnusedX_SpecularShininess0;
  float Xhlslcc_UnusedX_SpecularIntensity;
  float Xhlslcc_UnusedX_SpecularIntensity0;
  float Xhlslcc_UnusedX_SpecularRoughness0;
  float Xhlslcc_UnusedX_SpecularThreshold;
  float Xhlslcc_UnusedX_SpecularShadowOffset;
  float Xhlslcc_UnusedX_SpecularShadowIntensity;
  float Xhlslcc_UnusedX_ExMapThreshold;
  float Xhlslcc_UnusedX_ExSpecularIntensity;
  float Xhlslcc_UnusedX_ExCheekIntensity;
  float Xhlslcc_UnusedX_ExShyIntensity;
  float Xhlslcc_UnusedX_ExShadowIntensity;
  vec4 Xhlslcc_UnusedX_ExCheekColor;
  vec4 Xhlslcc_UnusedX_ExShyColor;
  vec4 Xhlslcc_UnusedX_ExShadowColor;
  vec4 Xhlslcc_UnusedX_ExEyeColor;
  float Xhlslcc_UnusedX_HairBlendWeight;
  float Xhlslcc_UnusedX_HairBlendOffset;
  float Xhlslcc_UnusedX_EyeEffectProcs;
  float Xhlslcc_UnusedX_EyeEffectPower;
  vec4 Xhlslcc_UnusedX_EyeEffectColor;
  float Xhlslcc_UnusedX_EyeEffectDarken;
  float Xhlslcc_UnusedX_EmissionThreshold;
  float Xhlslcc_UnusedX_EmissionIntensity;
  float Xhlslcc_UnusedX_NoseLinePower;
  vec4 Xhlslcc_UnusedX_NoseLineColor;
  int _ShowPartID;
  vec4 Xhlslcc_UnusedX_OutlineColor;
  vec4 Xhlslcc_UnusedX_OutlineColor0;
  float Xhlslcc_UnusedX_OutlineWidth;
  float Xhlslcc_UnusedX_OneMinusCharacterOutlineWidthScale;
  float Xhlslcc_UnusedX_FixLipOutline;
  float Xhlslcc_UnusedX_OutlineColorIntensity;
  int _UsingDitherAlpha;
  float _DitherAlpha;
  float Xhlslcc_UnusedX_DissolveRate;
  vec4 Xhlslcc_UnusedX_DissolveUVSpeed;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor1;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor2;
  float Xhlslcc_UnusedX_DissolveDistortionIntensity;
  float Xhlslcc_UnusedX_DissolveOutlineSize1;
  float Xhlslcc_UnusedX_DissolveOutlineSize2;
  float Xhlslcc_UnusedX_DissolveOutlineOffset;
  float Xhlslcc_UnusedX_DissoveDirecMask;
  float Xhlslcc_UnusedX_DissolveMapAdd;
  float Xhlslcc_UnusedX_DissolveUV;
  vec4 Xhlslcc_UnusedX_DissolveOutlineSmoothStep;
  vec4 Xhlslcc_UnusedX_DissolveST;
  vec4 Xhlslcc_UnusedX_DistortionST;
  vec4 Xhlslcc_UnusedX_DissolveMap_ST;
  vec4 Xhlslcc_UnusedX_DissolveComponent;
  vec4 Xhlslcc_UnusedX_DissolveDiretcionXYZ;
  vec4 Xhlslcc_UnusedX_DissolveCenter;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskPos;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskRootOffset;
  float Xhlslcc_UnusedX_DissolvePosMaskWorldON;
  float Xhlslcc_UnusedX_DissolveUseDirection;
  float Xhlslcc_UnusedX_DissolvePosMaskFilpOn;
  float Xhlslcc_UnusedX_DissolvePosMaskOn;
  float Xhlslcc_UnusedX_DissolvePosMaskGlobalOn;
  float Xhlslcc_UnusedX_DissoveON;
  float Xhlslcc_UnusedX_RimEdge;
  float Xhlslcc_UnusedX_RimFeatherWidth;
  float Xhlslcc_UnusedX_RimLightMode;
  vec4 Xhlslcc_UnusedX_RimColor;
  vec4 Xhlslcc_UnusedX_RimOffset;
  vec4 Xhlslcc_UnusedX_RimColor0;
  float Xhlslcc_UnusedX_Rimintensity;
  float Xhlslcc_UnusedX_RimWidth;
  float Xhlslcc_UnusedX_RimWidth0;
  float Xhlslcc_UnusedX_CustomColor;
  vec4 Xhlslcc_UnusedX_CustomColor0;
  vec4 Xhlslcc_UnusedX_CustomColor1;
  vec4 Xhlslcc_UnusedX_CustomColor2;
  vec4 Xhlslcc_UnusedX_CustomColor3;
  vec4 Xhlslcc_UnusedX_CustomColor4;
  vec4 Xhlslcc_UnusedX_CustomColor5;
  vec4 Xhlslcc_UnusedX_CustomColor6;
  vec4 Xhlslcc_UnusedX_CustomColor7;
  vec4 Xhlslcc_UnusedX_CustomColor8;
  vec4 Xhlslcc_UnusedX_CustomColor9;
  vec4 Xhlslcc_UnusedX_CustomColor10;
  vec4 Xhlslcc_UnusedX_CustomColor11;
  vec4 Xhlslcc_UnusedX_CustomColor12;
  vec4 Xhlslcc_UnusedX_CustomColor13;
  vec4 Xhlslcc_UnusedX_CustomSkinColor;
  vec4 Xhlslcc_UnusedX_CustomSkinColor1;
  vec4 Xhlslcc_UnusedX_CustomSkinLineColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor2;
  vec4 Xhlslcc_UnusedX_CustomEyeBaseColor;
  vec4 Xhlslcc_UnusedX_CustomSkinLightColor;
  vec4 Xhlslcc_UnusedX_CustomSkinDarkColor;
  vec4 Xhlslcc_UnusedX_CustomEyeDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLightColor;
  vec4 Xhlslcc_UnusedX_CustomHairDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLineColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateDarkColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurDarkColor;
  vec4 Xhlslcc_UnusedX_CustomFurInLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurInDarkColor;
  float Xhlslcc_UnusedX_CustomEyeBallColor2Range;
  int _HideCharaParts;
  int _HideNPCParts;
  float Xhlslcc_UnusedX_RimIntensityDark;
  float Xhlslcc_UnusedX_WithFur;
  float Xhlslcc_UnusedX_FresnelColorStrength;
  vec4 Xhlslcc_UnusedX_FresnelColor;
  vec4 Xhlslcc_UnusedX_FresnelBSI;
  float Xhlslcc_UnusedX_EnableAlphaCutoff;
  float Xhlslcc_UnusedX_mBloomIntensity0;
  float _mBloomIntensity1;
  float Xhlslcc_UnusedX_mBloomIntensity;
  vec4 Xhlslcc_UnusedX_mBloomColor0;
  float Xhlslcc_UnusedX_CustomsizedFace;
  vec4 Xhlslcc_UnusedX_InstaceProbeUV;
};
layout(location = 0) uniform sampler2D _FaceMap;
layout(location = 1) uniform sampler2D _GBufferA;
in vec4 vs_TEXCOORD0;
in vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat10_0;
bool u_xlatb0;
float u_xlat16_1;
bool u_xlatb2;
void main(){
  (u_xlat0.x = texture(_FaceMap, vs_TEXCOORD0.xy).x);
  (u_xlatb2 = (u_xlat0.x < 0.80000001));
  (u_xlatb0 = (0.1 < u_xlat0.x));
  (u_xlatb0 = (u_xlatb0 && u_xlatb2));
  (u_xlat16_1 = ((u_xlatb0) ? (_mBloomIntensity1) : (0.0)));

  (u_xlat0.xy = (vs_TEXCOORD2.xy / vs_TEXCOORD2.ww));
  (u_xlat10_0.xyz = texture(_GBufferA, u_xlat0.xy).xyz);
  (SV_Target0.xyz = (u_xlat10_0.xyz * vec3(u_xlat16_1)));
  (SV_Target0.w = 0.0);
  return ;
}
