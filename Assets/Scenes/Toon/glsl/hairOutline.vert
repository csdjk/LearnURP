#version 450
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform float _ES_OutlineDisableDistanceScale;
uniform float _ES_OutlineFallbackScale;
layout(std140, binding = 1) uniform UnityPerDraw{
  vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
  vec4 hlslcc_mtx4x4unity_WorldToObject[4];
  vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixMV[4];
  vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixMVP[4];
  vec4 Xhlslcc_UnusedXunity_WorldTransformParams;
  vec4 Xhlslcc_UnusedXunity_RenderingLayer;
  vec4 Xhlslcc_UnusedXunity_LightData;
  vec4 Xhlslcc_UnusedXunity_LightIndices[2];
  vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;
  vec4 Xhlslcc_UnusedXunity_SpecCube0_HDR;
  vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;
  vec4 Xhlslcc_UnusedXunity_LightmapST;
  vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;
  vec4 Xhlslcc_UnusedXunity_SHAr;
  vec4 Xhlslcc_UnusedXunity_SHAg;
  vec4 Xhlslcc_UnusedXunity_SHAb;
  vec4 Xhlslcc_UnusedXunity_SHBr;
  vec4 Xhlslcc_UnusedXunity_SHBg;
  vec4 Xhlslcc_UnusedXunity_SHBb;
  vec4 Xhlslcc_UnusedXunity_SHC;
  vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];
  vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];
  vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;
};
layout(std140, binding = 2) uniform CharacterOutlineBuffer{
  vec4 Xhlslcc_UnusedX_OutlineColorInner;
  vec4 Xhlslcc_UnusedX_OutlineColorOuter;
  float Xhlslcc_UnusedX_HighlightPow;
  float Xhlslcc_UnusedX_OutlineFadeout;
  float _OutlineScale;
  float Xhlslcc_UnusedX_OutlineEnhance;
  float Xhlslcc_UnusedX_AuraWidth;
  float Xhlslcc_UnusedX_AuraOffset;
  vec4 Xhlslcc_UnusedX_AuraColor0;
  vec4 Xhlslcc_UnusedX_AuraColor1;
  vec4 Xhlslcc_UnusedX_AuraDisStep;
  vec4 Xhlslcc_UnusedX_AuraSmoothStep;
  vec4 Xhlslcc_UnusedX_AuraSpeed;
  vec4 Xhlslcc_UnusedX_Aurafresnel;
  float Xhlslcc_UnusedX_AuraScrPosScale;
  float Xhlslcc_UnusedX_AuraScrPosXYOffset;
  vec4 Xhlslcc_UnusedX_AuraNoise_ST;
  float Xhlslcc_UnusedX_OutlineFixRange1;
  float Xhlslcc_UnusedX_OutlineFixRange2;
  float Xhlslcc_UnusedX_OutlineFixRange3;
  float Xhlslcc_UnusedX_OutlineFixRange4;
  float Xhlslcc_UnusedX_OutlineFixSide;
  float Xhlslcc_UnusedX_OutlineFixFront;
  float Xhlslcc_UnusedX_OutlineWidth2;
  float _OutlineExtdStart;
  float _OutlineExtdMax;
  float _OutlineOffset;
  vec3 Xhlslcc_UnusedX_HoloBaseColor;
  vec3 Xhlslcc_UnusedX_OffsetDirtection;
  float Xhlslcc_UnusedX_OffsetSize;
  float Xhlslcc_UnusedX_OffsetSpeed;
  float Xhlslcc_UnusedX_OffsetMaskSize;
  float Xhlslcc_UnusedX_OffsetMaskSpeed;
  float Xhlslcc_UnusedX_OffsetMaskRange;
  float Xhlslcc_UnusedX_OffsetIntensity;
  float Xhlslcc_UnusedX_OffsetFrequency;
  float Xhlslcc_UnusedX_OffsetDuration;
  vec3 Xhlslcc_UnusedX_ScanColor;
  float Xhlslcc_UnusedX_ScanIntensity;
  float Xhlslcc_UnusedX_ScanTiling;
  vec3 Xhlslcc_UnusedX_ScanDirection;
  float Xhlslcc_UnusedX_ScanSpeed;
  float Xhlslcc_UnusedX_ScanLineAlpha;
  float Xhlslcc_UnusedX_ScanDisturbance;
  float Xhlslcc_UnusedX_Opacity;
  float Xhlslcc_UnusedX_TransparentAlphaControl;
  float Xhlslcc_UnusedX_GlowTiling;
  float Xhlslcc_UnusedX_GlowSpeed;
  float Xhlslcc_UnusedX_GlowDuration;
  float Xhlslcc_UnusedX_GrayWeight;
  vec3 Xhlslcc_UnusedX_HoloFresnelColor;
  float Xhlslcc_UnusedX_HoloFresnelBias;
  float Xhlslcc_UnusedX_HoloFresnelScale;
  float Xhlslcc_UnusedX_HoloFresnelPower;
  vec4 Xhlslcc_UnusedX_AtlasDivision;
  vec4 Xhlslcc_UnusedX_SnowTintColor;
  float Xhlslcc_UnusedX_SnowNormalScale;
  float Xhlslcc_UnusedX_SnowSmoothnessScale;
  vec4 Xhlslcc_UnusedX_SnowShadowColor;
  vec4 Xhlslcc_UnusedX_SnowTexTilingOffset;
  vec4 Xhlslcc_UnusedX_RustTintColor;
  float Xhlslcc_UnusedX_RustNormalScale;
  float Xhlslcc_UnusedX_RustSmoothnessScale;
  vec4 Xhlslcc_UnusedX_RustShadowColor;
  vec4 Xhlslcc_UnusedX_RustTexTilingOffset;
  float Xhlslcc_UnusedX_SnowSpecularIntensity;
  float Xhlslcc_UnusedX_RustSpecularIntensity;
  int Xhlslcc_UnusedX_DisableHeightBlend;
};
layout(std140, binding = 0) uniform UnityPerMaterial{
  vec3 Xhlslcc_UnusedX_CharaWorldSpaceOffset;
  float Xhlslcc_UnusedX_DisableWorldSpaceGradient;
  vec4 Xhlslcc_UnusedX_Color;
  vec4 Xhlslcc_UnusedX_BackColor;
  vec4 Xhlslcc_UnusedX_MainTex_ST;
  vec4 Xhlslcc_UnusedX_EyeShadowColor;
  vec4 Xhlslcc_UnusedX_BrightDiffuseColor;
  vec4 Xhlslcc_UnusedX_ShadowDiffuseColor;
  vec4 Xhlslcc_UnusedX_SpecularColor0;
  float Xhlslcc_UnusedX_IsMonster;
  float Xhlslcc_UnusedX_AlphaCutoff;
  float Xhlslcc_UnusedX_NormalScale;
  float Xhlslcc_UnusedX_ShadowThreshold;
  float Xhlslcc_UnusedX_ShadowFeather;
  float Xhlslcc_UnusedX_SpecularShininess;
  float Xhlslcc_UnusedX_SpecularShininess0;
  float Xhlslcc_UnusedX_SpecularIntensity;
  float Xhlslcc_UnusedX_SpecularIntensity0;
  float Xhlslcc_UnusedX_SpecularRoughness0;
  float Xhlslcc_UnusedX_SpecularThreshold;
  float Xhlslcc_UnusedX_SpecularShadowOffset;
  float Xhlslcc_UnusedX_SpecularShadowIntensity;
  float Xhlslcc_UnusedX_ExMapThreshold;
  float Xhlslcc_UnusedX_ExSpecularIntensity;
  float Xhlslcc_UnusedX_ExCheekIntensity;
  float Xhlslcc_UnusedX_ExShyIntensity;
  float Xhlslcc_UnusedX_ExShadowIntensity;
  vec4 Xhlslcc_UnusedX_ExCheekColor;
  vec4 Xhlslcc_UnusedX_ExShyColor;
  vec4 Xhlslcc_UnusedX_ExShadowColor;
  vec4 Xhlslcc_UnusedX_ExEyeColor;
  float Xhlslcc_UnusedX_HairBlendWeight;
  float Xhlslcc_UnusedX_HairBlendOffset;
  float Xhlslcc_UnusedX_EyeEffectProcs;
  float Xhlslcc_UnusedX_EyeEffectPower;
  vec4 Xhlslcc_UnusedX_EyeEffectColor;
  float Xhlslcc_UnusedX_EyeEffectDarken;
  float Xhlslcc_UnusedX_EmissionThreshold;
  float Xhlslcc_UnusedX_EmissionIntensity;
  float Xhlslcc_UnusedX_NoseLinePower;
  vec4 Xhlslcc_UnusedX_NoseLineColor;
  int _ShowPartID;
  vec4 Xhlslcc_UnusedX_OutlineColor;
  vec4 _OutlineColor0;
  float _OutlineWidth;
  float _OneMinusCharacterOutlineWidthScale;
  float Xhlslcc_UnusedX_FixLipOutline;
  float Xhlslcc_UnusedX_OutlineColorIntensity;
  int Xhlslcc_UnusedX_UsingDitherAlpha;
  float Xhlslcc_UnusedX_DitherAlpha;
  float Xhlslcc_UnusedX_DissolveRate;
  vec4 Xhlslcc_UnusedX_DissolveUVSpeed;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor1;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor2;
  float Xhlslcc_UnusedX_DissolveDistortionIntensity;
  float Xhlslcc_UnusedX_DissolveOutlineSize1;
  float Xhlslcc_UnusedX_DissolveOutlineSize2;
  float Xhlslcc_UnusedX_DissolveOutlineOffset;
  float Xhlslcc_UnusedX_DissoveDirecMask;
  float Xhlslcc_UnusedX_DissolveMapAdd;
  float Xhlslcc_UnusedX_DissolveUV;
  vec4 Xhlslcc_UnusedX_DissolveOutlineSmoothStep;
  vec4 Xhlslcc_UnusedX_DissolveST;
  vec4 Xhlslcc_UnusedX_DistortionST;
  vec4 Xhlslcc_UnusedX_DissolveMap_ST;
  vec4 Xhlslcc_UnusedX_DissolveComponent;
  vec4 Xhlslcc_UnusedX_DissolveDiretcionXYZ;
  vec4 Xhlslcc_UnusedX_DissolveCenter;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskPos;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskRootOffset;
  float Xhlslcc_UnusedX_DissolvePosMaskWorldON;
  float Xhlslcc_UnusedX_DissolveUseDirection;
  float Xhlslcc_UnusedX_DissolvePosMaskFilpOn;
  float Xhlslcc_UnusedX_DissolvePosMaskOn;
  float Xhlslcc_UnusedX_DissolvePosMaskGlobalOn;
  float Xhlslcc_UnusedX_DissoveON;
  float Xhlslcc_UnusedX_RimEdge;
  float Xhlslcc_UnusedX_RimFeatherWidth;
  float Xhlslcc_UnusedX_RimLightMode;
  vec4 Xhlslcc_UnusedX_RimColor;
  vec4 Xhlslcc_UnusedX_RimOffset;
  vec4 Xhlslcc_UnusedX_RimColor0;
  float Xhlslcc_UnusedX_Rimintensity;
  float Xhlslcc_UnusedX_RimWidth;
  float Xhlslcc_UnusedX_RimWidth0;
  float Xhlslcc_UnusedX_CustomColor;
  vec4 Xhlslcc_UnusedX_CustomColor0;
  vec4 Xhlslcc_UnusedX_CustomColor1;
  vec4 Xhlslcc_UnusedX_CustomColor2;
  vec4 Xhlslcc_UnusedX_CustomColor3;
  vec4 Xhlslcc_UnusedX_CustomColor4;
  vec4 Xhlslcc_UnusedX_CustomColor5;
  vec4 Xhlslcc_UnusedX_CustomColor6;
  vec4 Xhlslcc_UnusedX_CustomColor7;
  vec4 Xhlslcc_UnusedX_CustomColor8;
  vec4 Xhlslcc_UnusedX_CustomColor9;
  vec4 Xhlslcc_UnusedX_CustomColor10;
  vec4 Xhlslcc_UnusedX_CustomColor11;
  vec4 Xhlslcc_UnusedX_CustomColor12;
  vec4 Xhlslcc_UnusedX_CustomColor13;
  vec4 Xhlslcc_UnusedX_CustomSkinColor;
  vec4 Xhlslcc_UnusedX_CustomSkinColor1;
  vec4 Xhlslcc_UnusedX_CustomSkinLineColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor2;
  vec4 Xhlslcc_UnusedX_CustomEyeBaseColor;
  vec4 Xhlslcc_UnusedX_CustomSkinLightColor;
  vec4 Xhlslcc_UnusedX_CustomSkinDarkColor;
  vec4 Xhlslcc_UnusedX_CustomEyeDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLightColor;
  vec4 Xhlslcc_UnusedX_CustomHairDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLineColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateDarkColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurDarkColor;
  vec4 Xhlslcc_UnusedX_CustomFurInLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurInDarkColor;
  float Xhlslcc_UnusedX_CustomEyeBallColor2Range;
  int _HideCharaParts;
  int _HideNPCParts;
  float Xhlslcc_UnusedX_RimIntensityDark;
  float Xhlslcc_UnusedX_WithFur;
  float Xhlslcc_UnusedX_FresnelColorStrength;
  vec4 Xhlslcc_UnusedX_FresnelColor;
  vec4 Xhlslcc_UnusedX_FresnelBSI;
  float Xhlslcc_UnusedX_EnableAlphaCutoff;
  float Xhlslcc_UnusedX_mBloomIntensity0;
  float Xhlslcc_UnusedX_mBloomIntensity1;
  float Xhlslcc_UnusedX_mBloomIntensity;
  vec4 Xhlslcc_UnusedX_mBloomColor0;
  float Xhlslcc_UnusedX_CustomsizedFace;
  vec4 Xhlslcc_UnusedX_InstaceProbeUV;
};
in vec4 in_POSITION0;
in vec3 in_NORMAL0;
in vec4 in_TANGENT0;
in vec4 in_TEXCOORD0;
in vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
out vec4 vs_TEXCOORD2;
vec4 u_xlat0;
ivec2 u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
vec2 u_xlat16_3;
vec3 u_xlat4;
int u_xlati5;
bvec2 u_xlatb10;
float u_xlat11;
bool u_xlatb11;
float u_xlat15;
void main(){
  (u_xlat0.xyz = (hlslcc_mtx4x4unity_MatrixInvV[0].yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz));
  (u_xlat0.xyz = ((hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx) + u_xlat0.xyz));
  (u_xlat0.xyz = ((hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz) + u_xlat0.xyz));
  (u_xlat0.xyz = ((hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www) + u_xlat0.xyz));
  (u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz));
  (u_xlat1.xyz = (hlslcc_mtx4x4unity_MatrixInvV[1].yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz));
  (u_xlat1.xyz = ((hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx) + u_xlat1.xyz));
  (u_xlat1.xyz = ((hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz) + u_xlat1.xyz));
  (u_xlat1.xyz = ((hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www) + u_xlat1.xyz));
  (u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz));
  (u_xlat0.z = -0.1);
  (u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz));
  (u_xlat15 = inversesqrt(u_xlat15));
  (u_xlat0.xyz = (vec3(u_xlat15) * u_xlat0.xyz));


  (u_xlat1.xyz = (hlslcc_mtx4x4unity_MatrixV[1].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].yyy));
  (u_xlat1.xyz = ((hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx) + u_xlat1.xyz));
  (u_xlat1.xyz = ((hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz) + u_xlat1.xyz));
  (u_xlat1.xyz = ((hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www) + u_xlat1.xyz));
  (u_xlat1.xyz = (u_xlat1.xyz * in_POSITION0.yyy));
  (u_xlat2.xyz = (hlslcc_mtx4x4unity_MatrixV[1].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].yyy));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx) + u_xlat2.xyz));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz) + u_xlat2.xyz));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www) + u_xlat2.xyz));
  (u_xlat1.xyz = ((u_xlat2.xyz * in_POSITION0.xxx) + u_xlat1.xyz));
  (u_xlat2.xyz = (hlslcc_mtx4x4unity_MatrixV[1].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].yyy));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx) + u_xlat2.xyz));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz) + u_xlat2.xyz));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www) + u_xlat2.xyz));
  (u_xlat1.xyz = ((u_xlat2.xyz * in_POSITION0.zzz) + u_xlat1.xyz));
  (u_xlat2.xyz = (hlslcc_mtx4x4unity_MatrixV[1].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].yyy));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx) + u_xlat2.xyz));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz) + u_xlat2.xyz));
  (u_xlat2.xyz = ((hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www) + u_xlat2.xyz));
  (u_xlat1.xyz = (u_xlat1.xyz + u_xlat2.xyz));

//   u_xlat1.y = u_xlat1.y+0.02;
//   u_xlat1.x = u_xlat1.x+0.2;

  (u_xlat15 = (in_COLOR0.z * _OutlineOffset));
  (u_xlat1.w = (((-u_xlat15) * 0.0099999998) + u_xlat1.z));

  (u_xlat15 = (u_xlat1.w / hlslcc_mtx4x4unity_CameraProjection[1].y));
  (u_xlat15 = (abs(u_xlat15) / _OutlineScale));
  (u_xlat15 = inversesqrt(u_xlat15));
  (u_xlat15 = (1.0 / u_xlat15));
//   (u_xlatb11 = (vec4(0.0, 0.0, 0.0, 0.0) != vec4(_ES_OutlineDisableDistanceScale)));
//   (u_xlat15 = ((u_xlatb11) ? (_ES_OutlineFallbackScale) : (u_xlat15)));
  float outlineWidth = 0.1;
  (u_xlat11 = (_OutlineScale * outlineWidth));
  (u_xlat11 = (u_xlat11 * in_COLOR0.w));
  (u_xlat15 = (u_xlat15 * u_xlat11));
  //_OneMinusCharacterOutlineWidthScale = 0
//   (u_xlat16_3.x = ((-_OneMinusCharacterOutlineWidthScale) + 1.0));
//   (u_xlat15 = (u_xlat15 * u_xlat16_3.x));

//   (u_xlat2.xyz = (in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz));
//   (u_xlat2.xyz = ((hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx) + u_xlat2.xyz));
//   (u_xlat2.xyz = ((hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz) + u_xlat2.xyz));
//   (u_xlat2.xyz = (u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz));
//   (u_xlat4.xyz = (u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz)));
  //_OutlineScale = 0.031 , _OutlineExtdStart = 6.5 , _OutlineExtdMax = 18.1
  //_OutlineOffset = 0 , _OutlineColorIntensity = 0 , _OutlineWidth = 0.03
  (vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_CameraProjection[1].yyy*0.1);

//   (u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz));
//   (u_xlat11 = sqrt(u_xlat11));
//   (u_xlat11 = (u_xlat11 + (-_OutlineExtdStart)));
//   (u_xlat2.x = ((-_OutlineExtdStart) + _OutlineExtdMax));
//   (u_xlat2.x = (1.0 / u_xlat2.x));
//   (u_xlat11 = (u_xlat11 * u_xlat2.x));
//   (u_xlat11 = clamp(u_xlat11, 0.0, 1.0));
//   (u_xlat2.x = ((u_xlat11 * -2.0) + 3.0));
//   (u_xlat11 = (u_xlat11 * u_xlat11));
//   (u_xlat11 = (u_xlat11 * u_xlat2.x));
//   (u_xlat11 = min(u_xlat11, 0.5));
//   (u_xlat11 = (u_xlat11 + 1.0));
//   (u_xlat15 = (u_xlat15 * u_xlat11));
//   (u_xlat0.xyz = ((u_xlat0.xyz * vec3(u_xlat15)) + u_xlat1.xyw));
//   (u_xlat0.xyz = ((u_xlat0.xyz * vec3(u_xlat15)) + u_xlat1.xyw));
  (u_xlat0.xyz = u_xlat1.xyz);

  (u_xlat1.x = hlslcc_mtx4x4glstate_matrix_projection[0].z);
  (u_xlat1.y = hlslcc_mtx4x4glstate_matrix_projection[1].z);
  (u_xlat1.z = hlslcc_mtx4x4glstate_matrix_projection[2].z);
  (u_xlat1.w = hlslcc_mtx4x4glstate_matrix_projection[3].z);
  (u_xlat0.w = 1.0);
  (u_xlat1.z = dot(u_xlat1, u_xlat0));
  (u_xlat2.x = hlslcc_mtx4x4glstate_matrix_projection[0].x);
  (u_xlat2.y = hlslcc_mtx4x4glstate_matrix_projection[2].x);
  (u_xlat2.z = hlslcc_mtx4x4glstate_matrix_projection[3].x);
  (u_xlat1.x = dot(u_xlat2.xyz, u_xlat0.xzw));
  (u_xlat2.x = hlslcc_mtx4x4glstate_matrix_projection[1].y);
  (u_xlat2.y = hlslcc_mtx4x4glstate_matrix_projection[2].y);
  (u_xlat2.z = hlslcc_mtx4x4glstate_matrix_projection[3].y);
  (u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.yzw));
  (u_xlat0.x = hlslcc_mtx4x4glstate_matrix_projection[2].w);
  (u_xlat0.y = hlslcc_mtx4x4glstate_matrix_projection[3].w);
  (u_xlat1.w = dot(u_xlat0.xy, u_xlat0.zw));
//   (u_xlat16_3.xy = (in_COLOR0.yx * vec2(256.0, 256.0)));
//   (u_xlati0.xy = ivec2(u_xlat16_3.xy));
//   (u_xlati0.xy = ivec2(uvec2((uint(u_xlati0.x) & uint(_ShowPartID)), (uint(u_xlati0.y) & uint(_ShowPartID)))));
//   (u_xlatb10.xy = lessThan(ivec4(0, 0, 0, 0), ivec4(_HideCharaParts, _HideNPCParts, _HideCharaParts, _HideNPCParts)).xy);
//   (u_xlati5 = ((u_xlatb10.y) ? (u_xlati0.y) : (1)));
//   (u_xlati0.x = ((u_xlatb10.x) ? (u_xlati0.x) : (u_xlati5)));
//   (u_xlatb0 = (0 < u_xlati0.x));
//   (gl_Position = ((bool(u_xlatb0)) ? (u_xlat1) : (vec4(-99.0, -99.0, -99.0, 1.0))));
  (gl_Position = u_xlat1);
//   (vs_TEXCOORD0.xy = in_TEXCOORD0.xy);
//   (vs_TEXCOORD0.zw = vec2(0.0, 0.0));
//   (vs_TEXCOORD1.xyz = in_COLOR0.xyz);
//   (vs_TEXCOORD1.w = 0.0);
//   (u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz));
//   (u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz));
//   (u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz));
//   (u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz));
//   (u_xlat15 = max(u_xlat15, 0.0));
//   (u_xlat15 = inversesqrt(u_xlat15));
//   (u_xlat0.xyz = (vec3(u_xlat15) * u_xlat0.xyz));
//   (u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz));
//   (u_xlat15 = inversesqrt(u_xlat15));
//   (vs_TEXCOORD8.xyz = (vec3(u_xlat15) * u_xlat0.xyz));
//   (vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0));
  return ;
}
