#version 450
uniform vec3 _WorldSpaceCameraPos;
uniform float _OneMinusGlobalMainIntensity;
uniform float _ES_TransitionRate;
uniform vec4 hlslcc_mtx4x4_ES_GlobalRotMatrix[4];
uniform float _ES_FogColor;
uniform float _ES_FogDensity;
uniform float _ES_FogNear;
uniform float _ES_FogFar;
uniform float _ES_HeightFogColor;
uniform float _ES_HeightFogBaseHeight;
uniform float _ES_HeightFogRange;
uniform float _ES_HeightFogDensity;
uniform float _ES_HeightFogFogNear;
uniform float _ES_HeightFogFogFar;
uniform float _ES_FogCharacterNearFactor;
uniform float _ES_HeightFogAddAjust;
uniform float _OneMinusGlobalMainIntensityEnable;
layout(std140, binding = 0) uniform UnityPerMaterial{
  vec3 Xhlslcc_UnusedX_CharaWorldSpaceOffset;
  float Xhlslcc_UnusedX_DisableWorldSpaceGradient;
  vec4 Xhlslcc_UnusedX_Color;
  vec4 Xhlslcc_UnusedX_BackColor;
  vec4 Xhlslcc_UnusedX_MainTex_ST;
  vec4 Xhlslcc_UnusedX_EyeShadowColor;
  vec4 Xhlslcc_UnusedX_BrightDiffuseColor;
  vec4 Xhlslcc_UnusedX_ShadowDiffuseColor;
  vec4 Xhlslcc_UnusedX_SpecularColor0;
  float Xhlslcc_UnusedX_IsMonster;
  float Xhlslcc_UnusedX_AlphaCutoff;
  float Xhlslcc_UnusedX_NormalScale;
  float Xhlslcc_UnusedX_ShadowThreshold;
  float Xhlslcc_UnusedX_ShadowFeather;
  float Xhlslcc_UnusedX_SpecularShininess;
  float Xhlslcc_UnusedX_SpecularShininess0;
  float Xhlslcc_UnusedX_SpecularIntensity;
  float Xhlslcc_UnusedX_SpecularIntensity0;
  float Xhlslcc_UnusedX_SpecularRoughness0;
  float Xhlslcc_UnusedX_SpecularThreshold;
  float Xhlslcc_UnusedX_SpecularShadowOffset;
  float Xhlslcc_UnusedX_SpecularShadowIntensity;
  float Xhlslcc_UnusedX_ExMapThreshold;
  float Xhlslcc_UnusedX_ExSpecularIntensity;
  float Xhlslcc_UnusedX_ExCheekIntensity;
  float Xhlslcc_UnusedX_ExShyIntensity;
  float Xhlslcc_UnusedX_ExShadowIntensity;
  vec4 Xhlslcc_UnusedX_ExCheekColor;
  vec4 Xhlslcc_UnusedX_ExShyColor;
  vec4 Xhlslcc_UnusedX_ExShadowColor;
  vec4 Xhlslcc_UnusedX_ExEyeColor;
  float Xhlslcc_UnusedX_HairBlendWeight;
  float Xhlslcc_UnusedX_HairBlendOffset;
  float Xhlslcc_UnusedX_EyeEffectProcs;
  float Xhlslcc_UnusedX_EyeEffectPower;
  vec4 Xhlslcc_UnusedX_EyeEffectColor;
  float Xhlslcc_UnusedX_EyeEffectDarken;
  float Xhlslcc_UnusedX_EmissionThreshold;
  float Xhlslcc_UnusedX_EmissionIntensity;
  float Xhlslcc_UnusedX_NoseLinePower;
  vec4 Xhlslcc_UnusedX_NoseLineColor;
  int _ShowPartID;
  vec4 _OutlineColor;
  vec4 Xhlslcc_UnusedX_OutlineColor0;
  float _OutlineWidth;
  float _OneMinusCharacterOutlineWidthScale;
  float Xhlslcc_UnusedX_OutlineBlendWeight;
  float Xhlslcc_UnusedX_OutlineBlendOffset;
  float _FixLipOutline;
  float Xhlslcc_UnusedX_OutlineColorIntensity;
  int Xhlslcc_UnusedX_UsingDitherAlpha;
  float Xhlslcc_UnusedX_DitherAlpha;
  float Xhlslcc_UnusedX_DissolveRate;
  vec4 Xhlslcc_UnusedX_DissolveUVSpeed;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor1;
  vec4 Xhlslcc_UnusedX_DissolveOutlineColor2;
  float Xhlslcc_UnusedX_DissolveDistortionIntensity;
  float Xhlslcc_UnusedX_DissolveOutlineSize1;
  float Xhlslcc_UnusedX_DissolveOutlineSize2;
  float Xhlslcc_UnusedX_DissolveOutlineOffset;
  float Xhlslcc_UnusedX_DissoveDirecMask;
  float Xhlslcc_UnusedX_DissolveMapAdd;
  float Xhlslcc_UnusedX_DissolveUV;
  vec4 Xhlslcc_UnusedX_DissolveOutlineSmoothStep;
  vec4 Xhlslcc_UnusedX_DissolveST;
  vec4 Xhlslcc_UnusedX_DistortionST;
  vec4 Xhlslcc_UnusedX_DissolveMap_ST;
  vec4 Xhlslcc_UnusedX_DissolveComponent;
  vec4 Xhlslcc_UnusedX_DissolveDiretcionXYZ;
  vec4 Xhlslcc_UnusedX_DissolveCenter;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskPos;
  vec4 Xhlslcc_UnusedX_DissolvePosMaskRootOffset;
  float Xhlslcc_UnusedX_DissolvePosMaskWorldON;
  float Xhlslcc_UnusedX_DissolveUseDirection;
  float Xhlslcc_UnusedX_DissolvePosMaskFilpOn;
  float Xhlslcc_UnusedX_DissolvePosMaskOn;
  float Xhlslcc_UnusedX_DissolvePosMaskGlobalOn;
  float Xhlslcc_UnusedX_DissoveON;
  float Xhlslcc_UnusedX_RimEdge;
  float Xhlslcc_UnusedX_RimFeatherWidth;
  float Xhlslcc_UnusedX_RimLightMode;
  vec4 Xhlslcc_UnusedX_RimColor;
  vec4 Xhlslcc_UnusedX_RimOffset;
  vec4 Xhlslcc_UnusedX_RimColor0;
  float Xhlslcc_UnusedX_Rimintensity;
  float Xhlslcc_UnusedX_RimWidth;
  float Xhlslcc_UnusedX_RimWidth0;
  float Xhlslcc_UnusedX_CustomColor;
  vec4 Xhlslcc_UnusedX_CustomColor0;
  vec4 Xhlslcc_UnusedX_CustomColor1;
  vec4 Xhlslcc_UnusedX_CustomColor2;
  vec4 Xhlslcc_UnusedX_CustomColor3;
  vec4 Xhlslcc_UnusedX_CustomColor4;
  vec4 Xhlslcc_UnusedX_CustomColor5;
  vec4 Xhlslcc_UnusedX_CustomColor6;
  vec4 Xhlslcc_UnusedX_CustomColor7;
  vec4 Xhlslcc_UnusedX_CustomColor8;
  vec4 Xhlslcc_UnusedX_CustomColor9;
  vec4 Xhlslcc_UnusedX_CustomColor10;
  vec4 Xhlslcc_UnusedX_CustomColor11;
  vec4 Xhlslcc_UnusedX_CustomColor12;
  vec4 Xhlslcc_UnusedX_CustomColor13;
  vec4 Xhlslcc_UnusedX_CustomSkinColor;
  vec4 Xhlslcc_UnusedX_CustomSkinColor1;
  vec4 Xhlslcc_UnusedX_CustomSkinLineColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor;
  vec4 Xhlslcc_UnusedX_CustomBeardColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor1;
  vec4 Xhlslcc_UnusedX_CustomEyeBallColor2;
  vec4 Xhlslcc_UnusedX_CustomEyeBaseColor;
  vec4 Xhlslcc_UnusedX_CustomSkinLightColor;
  vec4 Xhlslcc_UnusedX_CustomSkinDarkColor;
  vec4 Xhlslcc_UnusedX_CustomEyeDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLightColor;
  vec4 Xhlslcc_UnusedX_CustomHairDarkColor;
  vec4 Xhlslcc_UnusedX_CustomHairLineColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateDarkColor;
  vec4 Xhlslcc_UnusedX_CustomDecorateLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurDarkColor;
  vec4 Xhlslcc_UnusedX_CustomFurInLightColor;
  vec4 Xhlslcc_UnusedX_CustomFurInDarkColor;
  float Xhlslcc_UnusedX_CustomEyeBallColor2Range;
  int _HideCharaParts;
  int _HideNPCParts;
  float Xhlslcc_UnusedX_RimIntensityDark;
  float Xhlslcc_UnusedX_WithFur;
  float Xhlslcc_UnusedX_FresnelColorStrength;
  vec4 Xhlslcc_UnusedX_FresnelColor;
  vec4 Xhlslcc_UnusedX_FresnelBSI;
  float Xhlslcc_UnusedX_EnableAlphaCutoff;
  float Xhlslcc_UnusedX_mBloomIntensity0;
  float Xhlslcc_UnusedX_mBloomIntensity1;
  float Xhlslcc_UnusedX_mBloomIntensity;
  vec4 Xhlslcc_UnusedX_mBloomColor0;
  float Xhlslcc_UnusedX_CustomsizedFace;
  vec4 Xhlslcc_UnusedX_InstaceProbeUV;
};
layout(location = 0) uniform sampler2D _ES_GradientAtlas;
in vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out float SV_Target2;
vec4 u_xlat16_0;
vec4 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat16_2;
vec3 u_xlat16_3;
vec3 u_xlat16_4;
vec3 u_xlat16_5;
float u_xlat16_6;
vec2 u_xlat16_12;
float u_xlat16_18;
bool u_xlatb20;
void main(){
  (u_xlat16_0.x = _ES_FogFar);
  (u_xlat16_0.y = _ES_HeightFogFogFar);
  (u_xlat16_1.xz = vec2(_ES_FogNear, _ES_FogDensity));
  (u_xlat16_1.yw = vec2(_ES_HeightFogFogNear, _ES_HeightFogDensity));
  (u_xlat16_12.xy = (u_xlat16_0.xy + (-u_xlat16_1.xy)));
  (u_xlat16_12.xy = ((vec2(vec2(_ES_FogCharacterNearFactor, _ES_FogCharacterNearFactor)) * u_xlat16_12.xy) + u_xlat16_1.xy));
  (u_xlat16_0.xy = ((-u_xlat16_12.xy) + u_xlat16_0.xy));
  (u_xlat2.xyz = (vs_TEXCOORD6.xyz + (-_WorldSpaceCameraPos.xyz)));
  (u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz));
  (u_xlat2.x = sqrt(u_xlat2.x));
  (u_xlat16_12.xy = ((-u_xlat16_12.xy) + u_xlat2.xx));
  (u_xlat16_0.xy = (u_xlat16_12.xy / u_xlat16_0.xy));
  (u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0));
  (u_xlat16_0.xy = (u_xlat16_0.xy * u_xlat16_1.zw));
  (u_xlat16_12.xy = (((-u_xlat16_0.xy) * u_xlat16_0.xy) + u_xlat16_0.xy));
  (u_xlat16_0.xy = ((u_xlat16_0.xy * u_xlat16_12.xy) + u_xlat16_0.xy));
  (u_xlat16_0.w = ((_ES_TransitionRate * 0.125) + _ES_HeightFogColor));
  (u_xlat16_2.xyz = textureLod(_ES_GradientAtlas, u_xlat16_0.yw, 0.0).xyz);
  (u_xlatb20 = (0.0 < _ES_HeightFogRange));
  (u_xlat16_18 = dot(vs_TEXCOORD6.xyz, hlslcc_mtx4x4_ES_GlobalRotMatrix[3].xyz));
  (u_xlat16_18 = (u_xlat16_18 + (-hlslcc_mtx4x4_ES_GlobalRotMatrix[3].w)));
  (u_xlat16_1.x = (u_xlat16_18 + (-_ES_HeightFogBaseHeight)));
  (u_xlat16_18 = ((-u_xlat16_18) + _ES_HeightFogBaseHeight));
  (u_xlat16_18 = ((u_xlatb20) ? (u_xlat16_1.x) : (u_xlat16_18)));
  (u_xlat16_18 = max(u_xlat16_18, 0.0));
  (u_xlat16_1.x = (abs(_ES_HeightFogRange) + 1.0));
  (u_xlat16_18 = (u_xlat16_18 / u_xlat16_1.x));
  (u_xlat16_18 = min(u_xlat16_18, 1.0));
  (u_xlat16_18 = ((-u_xlat16_18) + 1.0));
  (u_xlat16_1.xyz = (vec3(u_xlat16_18) * u_xlat16_2.xyz));
  (u_xlat16_0.z = ((_ES_TransitionRate * 0.125) + _ES_FogColor));
  (u_xlat16_3.xyz = textureLod(_ES_GradientAtlas, u_xlat16_0.xz, 0.0).xyz);
  (u_xlat16_0.xy = u_xlat16_0.xy);
  (u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0));
  (u_xlat16_4.xyz = ((u_xlat16_3.xyz * u_xlat16_0.xxx) + (-_OutlineColor.xyz)));
  (u_xlat16_4.xyz = ((u_xlat16_0.xxx * u_xlat16_4.xyz) + _OutlineColor.xyz));
  (u_xlat16_5.xyz = ((u_xlat16_3.xyz * u_xlat16_0.xxx) + u_xlat16_4.xyz));
  (u_xlat16_0.x = (_ES_FogDensity + -1.0));
  (u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0));
  (u_xlat16_4.xyz = ((u_xlat16_5.xyz * u_xlat16_0.xxx) + u_xlat16_4.xyz));
  (u_xlat16_5.xyz = ((u_xlat16_1.xyz * u_xlat16_0.yyy) + (-u_xlat16_4.xyz)));
  (u_xlat16_5.xyz = ((u_xlat16_0.yyy * u_xlat16_5.xyz) + u_xlat16_4.xyz));
  (u_xlat16_1.xyz = ((u_xlat16_1.xyz * u_xlat16_0.yyy) + u_xlat16_5.xyz));
  (u_xlat16_0.x = ((u_xlat16_18 * _ES_HeightFogDensity) + -1.0));
  (u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0));
  (u_xlat16_1.xyz = ((u_xlat16_1.xyz * u_xlat16_0.xxx) + u_xlat16_5.xyz));
  (u_xlat16_5.xyz = (vec3(u_xlat16_18) * u_xlat16_1.xyz));
  (u_xlat16_1.xyz = ((-u_xlat16_4.xyz) + u_xlat16_1.xyz));
  (u_xlat16_0.xzw = ((vec3(u_xlat16_18) * u_xlat16_1.xyz) + u_xlat16_4.xyz));
  (u_xlat16_1.xyz = ((u_xlat16_5.xyz * u_xlat16_0.yyy) + u_xlat16_4.xyz));
  (u_xlat16_1.xyz = ((-u_xlat16_0.xzw) + u_xlat16_1.xyz));
  (u_xlat16_6 = max(u_xlat16_2.z, u_xlat16_2.y));
  (u_xlat16_6 = max(u_xlat16_6, u_xlat16_2.x));
  (u_xlat16_6 = ((_ES_HeightFogAddAjust * (-u_xlat16_6)) + u_xlat16_6));
  (u_xlat16_0.xyz = ((vec3(u_xlat16_6) * u_xlat16_1.xyz) + u_xlat16_0.xzw));

// _OutlineColor 0.09441, 0.04894, 0.05191, 1.00
  (SV_Target0.xyz = vec3(0,1,0));

//   lerp(_OutlineColor.xyz, u_xlat16_0.xyz, u_xlat16_18);
  (u_xlat16_0.xyz = (u_xlat16_0.xyz + (-_OutlineColor.xyz)));
  (u_xlat16_18 = (((-_OneMinusGlobalMainIntensityEnable) * _OneMinusGlobalMainIntensity) + 1.0));
//   (SV_Target0.xyz = ((vec3(u_xlat16_18) * u_xlat16_0.xyz) + _OutlineColor.xyz));

  (SV_Target0.w = 0.0);
  (SV_Target1 = vec4(uintBitsToFloat(4290772992u), uintBitsToFloat(4290772992u), 0.50196081, 0.0));
  (SV_Target2 = 0.0);
  return ;
}
