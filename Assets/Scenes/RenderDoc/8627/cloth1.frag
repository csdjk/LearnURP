#version 450
uniform vec4 _Time;
uniform vec4 _ProjectionParams;
uniform vec4 _ZBufferParams;
uniform vec4 unity_OrthoParams;
uniform vec4 _DepthDynamicScale;
layout(std140, binding = 0) uniform UnityPerMaterial{
  float _Screen_Door_Weight;
  float _RenderType;
  float _Particle_;
  float _Rotation;
  float _VertexColor_Ban;
  float _Add_Blend_Mode;
  float _SoftParticleFactor;
  vec4 _Final_VertexColor;
  float _Highlight_Alpha;
  float _Ink_Ignore;
  vec4 _Mesh_Final_VertexColor;
  vec4 _Main_Color;
  vec4 _Main_TilingOffset;
  vec4 _Main_CombinedProps1;
  vec4 _CustomDyeColor;
  vec4 _FlipBook_CombinedProps1;
  vec4 _Distort_TilingOffset;
  vec4 _Distort_CombinedProps1;
  vec4 _Distort_CombinedProps2;
  vec4 _Distort_CombinedProps3;
  float _Dst_Blend;
  float _Blend_Mode;
  vec4 _Blend_Color;
  vec4 _Blend_TilingOffset;
  vec4 _Blend_CombinedProps1;
  vec4 _Fresnel_Color;
  vec4 _Fresnel_CombinedProps1;
  vec4 _Alpha_Fresnel_CombinedProps1;
  vec4 _Alpha_TilingOffset;
  vec4 _Alpha_CombinedProps1;
  float _Alpha_Rotation;
  vec4 _Dissolve_TilingOffset;
  vec4 _Dissolve_EdgeColor;
  vec4 _Dissolve_CombinedProps1;
  vec4 _Dissolve_CombinedProps2;
  float _Effect_Dissolve_Key;
  vec4 _Effect_Dissolve_EdgeColor;
  vec4 _Effect_Dissolve_TilingOffset;
  vec4 _Effect_Dissolve_CombinedProps1;
  vec4 _Effect_Dissolve_CombinedProps2;
  vec4 _Noise_TilingOffset;
  vec4 _Mask_Noise_Speed;
  vec4 _VertexOffset_TilingOffset;
  vec4 _VertexOffset_CombinedProps1;
  vec4 _VertexOffset_CombinedProps2;
  vec4 _WangQiNPCHighLight;
  float _StainingLocalOff;
  float _StippleOn;
  float _StippleAlpha;
};
layout(location = 0) uniform sampler2D _CameraDepthTexture;
layout(location = 1) uniform sampler2D _Main_Tex;
layout(location = 2) uniform sampler2D _Distort_Tex;
layout(location = 3) uniform sampler2D _Blend_Tex;
layout(location = 4) uniform sampler2D _Alpha_Tex;
layout(location = 0) in vec4 vs_TEXCOORD8;
layout(location = 1) in vec4 vs_TEXCOORD1;
layout(location = 2) in vec4 vs_TEXCOORD2;
layout(location = 3) in vec4 vs_TEXCOORD3;
layout(location = 4) in vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat16_1;
vec2 u_xlat16_2;
vec4 u_xlat16_3;
vec4 u_xlat16_4;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat16_7;
vec2 u_xlat16_12;
void main(){
    vec3 debugColor = vec3(0.0,0.0,0.0);
  vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, (1.0 / gl_FragCoord.w));
  (u_xlat0 = (vs_TEXCOORD1.xyxy + vec4(-0.5, -0.5, -0.5, -0.5)));
  (u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw));
  (u_xlat1.x = inversesqrt(u_xlat1.x));
  (u_xlat0 = (u_xlat0 * u_xlat1.xxxx));
  (u_xlat0 = ((u_xlat0 * _Distort_CombinedProps2.wwww) + _Distort_CombinedProps2.yzyz));
  (u_xlat16_2.xy = ((vs_TEXCOORD1.xy * _Distort_TilingOffset.xy) + _Distort_TilingOffset.zw));
  (u_xlat1.xy = ((_Time.yy * _Distort_CombinedProps1.xy) + u_xlat16_2.xy));
  (u_xlat16_1.xy = texture(_Distort_Tex, u_xlat1.xy).xw);
    //todo: debug
    // debugColor.x = vs_TEXCOORD3.w;
  (u_xlat1.x = (u_xlat16_1.y * u_xlat16_1.x));
  (u_xlat1.x = (u_xlat1.x * vs_TEXCOORD3.w));
  (u_xlat0 = (u_xlat0 * u_xlat1.xxxx));
  (u_xlat16_2.xy = ((u_xlat0.xy * _Distort_CombinedProps3.xx) + vs_TEXCOORD1.xy));
  (u_xlat16_12.xy = ((u_xlat0.zw * _Distort_CombinedProps3.yy) + vs_TEXCOORD2.xy));
  (u_xlat16_3.xy = (vs_TEXCOORD3.xy + _Blend_TilingOffset.zw));
  (u_xlat0.xy = ((_Time.yy * _Blend_CombinedProps1.xy) + u_xlat16_3.xy));
  (u_xlat0.xy = ((u_xlat16_2.xy * _Blend_TilingOffset.xy) + u_xlat0.xy));
  (u_xlat16_0 = texture(_Blend_Tex, u_xlat0.xy));
  (u_xlat16_0 = (u_xlat16_0 * _Blend_Color));
    debugColor.xyz = _Blend_TilingOffset.xyz;

  (u_xlat16_3.xyz = (u_xlat16_0.www * u_xlat16_0.xyz));
  (u_xlat16_4.xy = (vs_TEXCOORD1.zw + _Main_TilingOffset.zw));
  (u_xlat1.xy = ((_Time.yy * _Main_CombinedProps1.xy) + u_xlat16_4.xy));
  (u_xlat1.xy = ((u_xlat16_2.xy * _Main_TilingOffset.xy) + u_xlat1.xy));
  (u_xlat16_1 = texture(_Main_Tex, u_xlat1.xy));
  (u_xlat16_4 = (u_xlat16_1 * _Main_Color));
  (u_xlat16_3.xyz = ((u_xlat16_4.xyz * u_xlat16_4.www) + u_xlat16_3.xyz));
  (u_xlat16_3.w = max(u_xlat16_0.w, u_xlat16_4.w));
  (u_xlat16_3 = (((-u_xlat16_0) * u_xlat16_4) + u_xlat16_3));
  (u_xlat16_0 = (u_xlat16_0 * u_xlat16_4));
  (u_xlat16_0 = ((vec4(vec4(_Blend_Mode, _Blend_Mode, _Blend_Mode, _Blend_Mode)) * u_xlat16_3) + u_xlat16_0));
  (u_xlat16_0 = (((-u_xlat16_1) * _Main_Color) + u_xlat16_0));
  (u_xlat16_0 = ((_Blend_CombinedProps1.wwww * u_xlat16_0) + u_xlat16_4));
  (u_xlat16_2.x = dot(u_xlat16_0.xyz, vec3(0.2126729, 0.7151522, 0.072175004)));
  (u_xlat16_3.xyz = ((u_xlat16_2.xxx * _CustomDyeColor.xyz) + (-u_xlat16_0.xyz)));
  (u_xlat16_3.xyz = ((_CustomDyeColor.www * u_xlat16_3.xyz) + u_xlat16_0.xyz));
  (u_xlat16_3.xyz = (u_xlat16_3.xyz * vs_TEXCOORD8.xyz));
  (u_xlat16_2.xy = (vs_TEXCOORD2.zw + _Alpha_TilingOffset.zw));
  (u_xlat1.xy = ((_Time.yy * _Alpha_CombinedProps1.xy) + u_xlat16_2.xy));
  (u_xlat1.xy = ((u_xlat16_12.xy * _Alpha_TilingOffset.xy) + u_xlat1.xy));

  (u_xlat16_1.x = texture(_Alpha_Tex, u_xlat1.xy).w);
  (u_xlat1.x = (u_xlat16_1.x * _Alpha_CombinedProps1.w));
  (u_xlat1.x = (u_xlat16_0.w * u_xlat1.x));
  (u_xlat16_2.x = (u_xlat1.x * vs_TEXCOORD8.w));
  (u_xlat16_7.xy = (vs_TEXCOORD6.xy / vs_TEXCOORD6.ww));
  (u_xlat1.xy = (u_xlat16_7.xy * _DepthDynamicScale.xy));
  (u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0)));
  (u_xlat1.xy = min(u_xlat1.xy, _DepthDynamicScale.zw));
  (u_xlat1.x = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0).x);
  (u_xlat6 = ((-u_xlat1.x) + hlslcc_FragCoord.z));
  (u_xlat1.x = ((_ZBufferParams.z * u_xlat1.x) + _ZBufferParams.w));
  (u_xlat1.x = (1.0 / u_xlat1.x));
  (u_xlat16_7.x = (u_xlat1.x + (-vs_TEXCOORD6.w)));
  (u_xlat1.x = ((-_ProjectionParams.y) + _ProjectionParams.z));
  (u_xlat1.x = (u_xlat1.x * u_xlat6));
  (u_xlatb6 = (vec4(0.0, 0.0, 0.0, 0.0) != vec4(unity_OrthoParams.w)));
  (u_xlat16_7.x = ((u_xlatb6) ? (u_xlat1.x) : (u_xlat16_7.x)));
  (u_xlat16_7.x = (u_xlat16_7.x * _SoftParticleFactor));
  (u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0));
  (u_xlat16_2.x = (u_xlat16_7.x * u_xlat16_2.x));
  (u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0));
  (SV_Target0.xyz = (u_xlat16_2.xxx * u_xlat16_3.xyz));
    SV_Target0.xyz = debugColor;
  (SV_Target0.w = (u_xlat16_2.x * _Add_Blend_Mode));
  (SV_Target0.w = (1.0));
  return ;
}
